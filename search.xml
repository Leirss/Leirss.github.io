<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【数学建模】蒙特卡洛模拟</title>
      <link href="/2020/08/27/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A8%A1%E6%8B%9F/"/>
      <url>/2020/08/27/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="我的总结"><a class="markdownIt-Anchor" href="#我的总结"></a> 我的总结：</h1><p>蒙特卡罗模型如果换一个名字就是计算机仿真，（计算机仿真现在的概念要大一点，可以理解为做大型工程的，两者不太一样，但在建模中类似）。</p><p>个人感觉也可以说蒙特卡洛模型是模拟退火、蚁群等算法的原型。</p><p>个人感觉这个经常放在论文的模型验证部分。</p><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言：</h1><p>蒙特卡洛模拟实际上就是计算机仿真，它可以解决超级多的建模问题。</p><p>公众号：数学建模学习交流。</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826223620952.png" alt="" /></p><h2 id="引例布峰投针实验"><a class="markdownIt-Anchor" href="#引例布峰投针实验"></a> 引例：布峰投针实验</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826224011324.png" alt="" /></p><h1 id="蒙特卡洛概述"><a class="markdownIt-Anchor" href="#蒙特卡洛概述"></a> 蒙特卡洛概述：</h1><blockquote><p>蒙特卡洛是一个思想，而不是算法</p><p>建模里就不去别计算机仿真和蒙特卡洛模拟了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826230436266.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826230527426.png" alt="" /></p><ul><li>可以求规划问题</li><li>可能会陷入局部最优</li></ul><h1 id="应用三门问题"><a class="markdownIt-Anchor" href="#应用三门问题"></a> 应用：三门问题</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826233109665.png" alt="" /></p><h1 id="模拟排队论"><a class="markdownIt-Anchor" href="#模拟排队论"></a> 模拟：排队论</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826233534076.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826233710104.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 蒙特卡洛模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】多元线性回归模型 - 序</title>
      <link href="/2020/08/26/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B-%E5%BA%8F/"/>
      <url>/2020/08/26/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B-%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="回归系数的解释"><a class="markdownIt-Anchor" href="#回归系数的解释"></a> 回归系数的解释：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825232427118.png" alt="" /></p><h2 id="什么时候取对数"><a class="markdownIt-Anchor" href="#什么时候取对数"></a> 什么时候取对数：</h2><blockquote><p>这个规定充满主观性，但是是专家给的，就专业了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825232536480.png" alt="" /></p><h2 id="四类模型回归系数解释"><a class="markdownIt-Anchor" href="#四类模型回归系数解释"></a> 四类模型回归系数解释：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825232745075.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825232908915.png" alt="" /></p><h3 id="特殊变量解释定性变量"><a class="markdownIt-Anchor" href="#特殊变量解释定性变量"></a> 特殊变量解释（定性变量）：</h3><blockquote><p>定性变量 转化维 定量变量： 引入虚拟变量</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233020196.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233157843.png" alt="" /></p><h4 id="多分类虚拟变量"><a class="markdownIt-Anchor" href="#多分类虚拟变量"></a> 多分类虚拟变量：</h4><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233419919.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233453828.png" alt="" /></p><h3 id="交互项"><a class="markdownIt-Anchor" href="#交互项"></a> 交互项：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233910486.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825234128728.png" alt="" /></p><h1 id="例子分析幼儿奶粉数据"><a class="markdownIt-Anchor" href="#例子分析幼儿奶粉数据"></a> 例子：分析幼儿奶粉数据：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825234148670.png" alt="" /></p><h2 id="数据"><a class="markdownIt-Anchor" href="#数据"></a> 数据：</h2><blockquote><p>只有三个定量指标，其它都是定性指标</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825234245257.png" alt="" /></p><h2 id="软件"><a class="markdownIt-Anchor" href="#软件"></a> 软件：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825234535886.png" alt="" /></p><h2 id="技巧"><a class="markdownIt-Anchor" href="#技巧"></a> 技巧：</h2><blockquote><p>比如商品量太多了，就不要做虚拟变量了</p></blockquote><h2 id="拟合度r2很低怎么办"><a class="markdownIt-Anchor" href="#拟合度r2很低怎么办"></a> 拟合度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>很低怎么办？：</h2><blockquote><p>一般的时候我们更多的是解释性回归，不看重<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>了。预测性的我们用的别的模型（比如拟合来做）</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826002421785.png" alt="" /></p><h2 id="标准化回归系数"><a class="markdownIt-Anchor" href="#标准化回归系数"></a> 标准化回归系数：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826002740699.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 多元线性回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】多元线性回归模型 - 一元线性回归</title>
      <link href="/2020/08/25/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B-%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
      <url>/2020/08/25/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B-%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是回归分析"><a class="markdownIt-Anchor" href="#什么是回归分析"></a> 什么是回归分析？</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824220934892.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221013183.png" alt="" /></p><h2 id="相关性-因果性"><a class="markdownIt-Anchor" href="#相关性-因果性"></a> 相关性 ≠ 因果性</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221247970.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221158760.png" alt="" /></p><h2 id="自变量y"><a class="markdownIt-Anchor" href="#自变量y"></a> 自变量Y：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221331403.png" alt="" /></p><h2 id="自变量x"><a class="markdownIt-Anchor" href="#自变量x"></a> 自变量X：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221515600.png" alt="" /></p><h2 id="回归分析的用处"><a class="markdownIt-Anchor" href="#回归分析的用处"></a> 回归分析的用处：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221805404.png" alt="" /></p><blockquote><p>这里要注意，因为涉及到不同自变量的权重，所以一般要去量纲，不然没意义。</p></blockquote><h2 id="回归分析的分类"><a class="markdownIt-Anchor" href="#回归分析的分类"></a> 回归分析的分类：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824222103880.png" alt="" /></p><h1 id="多元线性回归"><a class="markdownIt-Anchor" href="#多元线性回归"></a> 多元线性回归：</h1><h2 id="不同数据的处理"><a class="markdownIt-Anchor" href="#不同数据的处理"></a> 不同数据的处理：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824222636484.png" alt="" /></p><ul><li>横截面数据：多元线性回归</li><li>时间序列数据：最常用的是ARMA</li></ul><h3 id="横截面数据"><a class="markdownIt-Anchor" href="#横截面数据"></a> 横截面数据：</h3><p><img src= "/img/loading.gif" data-lazy-src="figures/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/image-20200824222649255.png" alt="" /></p><h3 id="时间序列数据"><a class="markdownIt-Anchor" href="#时间序列数据"></a> 时间序列数据：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824232125474.png" alt="" /></p><h3 id="面板数据"><a class="markdownIt-Anchor" href="#面板数据"></a> 面板数据：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824232207424.png" alt="" /></p><h1 id="数据的收集"><a class="markdownIt-Anchor" href="#数据的收集"></a> 数据的收集：</h1><p><a href="https://link.jiandaoyun.com/f/5cc652cc2cf3b22fb7819189">【简道云汇总】110+数据网站</a></p><p><a href="http://data.chongbuluo.com/">虫部落数据搜索</a></p><p><a href="https://link.jiandaoyun.com/f/5b35d05ff7f6ef2604d39a93">【汇总】数据来源/大数据平台</a></p><p><a href="">大数据工具导航工具</a>(<a href="http://hao.199it.com/">http://hao.199it.com/</a>)</p><p><a href="http://www.hippter.com/data.html">数据平台</a></p><hr /><p>上面的数据多半都是宏观数据，微观数据市面上很少</p><p><a href="https://bbs.pinggu.org/">大家可以在人大经济论坛搜索</a></p><h1 id="一元线性回归"><a class="markdownIt-Anchor" href="#一元线性回归"></a> 一元线性回归：</h1><h2 id="一元线性回归和一元线性函数拟合区别"><a class="markdownIt-Anchor" href="#一元线性回归和一元线性函数拟合区别"></a> 一元线性回归和一元线性函数拟合区别：</h2><blockquote><p>定义不一样，本质是一样的</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824233403563.png" alt="" /></p><h2 id="对线性的理解"><a class="markdownIt-Anchor" href="#对线性的理解"></a> 对线性的理解：</h2><blockquote><p>线性是对参数说的</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824233753623.png" alt="" /></p><h2 id="回归系数的解释"><a class="markdownIt-Anchor" href="#回归系数的解释"></a> 回归系数的解释：</h2><blockquote><p>求系数很简单</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824234327393.png" alt="" /></p><ul><li>这里的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>是对每个个体而言，也可以去掉，转换成对总体而言</li></ul><h3 id="内生性"><a class="markdownIt-Anchor" href="#内生性"></a> 内生性：</h3><blockquote><p>无偏性和一致性</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824234753326.png" alt="" /></p><h4 id="u_i是什么"><a class="markdownIt-Anchor" href="#u_i是什么"></a> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是什么？</h4><p><img src= "/img/loading.gif" data-lazy-src="figures/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/image-20200824235144988.png" alt="" /></p><h2 id="蒙特卡洛验证是否有内生性"><a class="markdownIt-Anchor" href="#蒙特卡洛验证是否有内生性"></a> 蒙特卡洛验证是否有内生性：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824235429966.png" alt="" /></p><h3 id="matlab"><a class="markdownIt-Anchor" href="#matlab"></a> matlab:</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825000304873.png" alt="" /></p><h2 id="降低内生性要求"><a class="markdownIt-Anchor" href="#降低内生性要求"></a> 降低内生性要求：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825000558498.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 多元线性回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】相关性分析 - 皮尔逊相关系数 &amp; 斯皮尔曼相关系数</title>
      <link href="/2020/08/24/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%9B%B8%E5%85%B3%E6%80%A7%E5%88%86%E6%9E%90-%E7%9A%AE%E5%B0%94%E9%80%8A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0-%E6%96%AF%E7%9A%AE%E5%B0%94%E6%9B%BC%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/"/>
      <url>/2020/08/24/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%9B%B8%E5%85%B3%E6%80%A7%E5%88%86%E6%9E%90-%E7%9A%AE%E5%B0%94%E9%80%8A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0-%E6%96%AF%E7%9A%AE%E5%B0%94%E6%9B%BC%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231157301.png" alt="" /></p><h1 id="皮尔逊person相关系-要求数据满足正态分布"><a class="markdownIt-Anchor" href="#皮尔逊person相关系-要求数据满足正态分布"></a> 皮尔逊Person相关系 （要求数据满足正态分布</h1><h2 id="总体和样本"><a class="markdownIt-Anchor" href="#总体和样本"></a> 总体和样本</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231257297.png" alt="" /></p><h2 id="总体皮尔逊person相关系数"><a class="markdownIt-Anchor" href="#总体皮尔逊person相关系数"></a> 总体皮尔逊Person相关系数</h2><blockquote><p>一般说的相关系数就是皮尔逊相关系数</p><p>就是概率论的知识</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231359070.png" alt="" /></p><p>消除量纲影响：</p><h3 id="总体"><a class="markdownIt-Anchor" href="#总体"></a> 总体：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231514139.png" alt="" /></p><h3 id="样本"><a class="markdownIt-Anchor" href="#样本"></a> 样本：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231841379.png" alt="" /></p><h2 id="意义"><a class="markdownIt-Anchor" href="#意义"></a> 意义：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231931125.png" alt="" /></p><h2 id="误区"><a class="markdownIt-Anchor" href="#误区"></a> 误区：</h2><blockquote><p>用于衡量线性</p><p><strong>两个变量必须线性相关。</strong></p><p>不是线性相关函数，不一样</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232246241.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232028972.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232203860.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232424387.png" alt="" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232540515.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232647798.png" alt="很多教材以0.7相关" /></p><h1 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232800453.png" alt="" /></p><blockquote><p>MATLAB EXCEL SPSS都能做</p></blockquote><h2 id="matlab"><a class="markdownIt-Anchor" href="#matlab"></a> MATLAB</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823233537865.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823233303792.png" alt="一个很好的习惯" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823234041854.png" alt="" /></p><h2 id="spss"><a class="markdownIt-Anchor" href="#spss"></a> SPSS</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823233848566.png" alt="" /></p><blockquote><p>C(n,2) 的散点图可以用spss计算</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823234339264.png" alt="" /></p><h1 id="假设检验"><a class="markdownIt-Anchor" href="#假设检验"></a> 假设检验：</h1><blockquote><p>概率论内容，考过的</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823235346159.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000231388.png" alt="" /></p><h1 id="对皮尔逊相关系数进行假设检验"><a class="markdownIt-Anchor" href="#对皮尔逊相关系数进行假设检验"></a> 对皮尔逊相关系数进行假设检验</h1><h2 id="条件"><a class="markdownIt-Anchor" href="#条件"></a> 条件：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824002028537.png" alt="" /></p><h2 id="第一步第二步"><a class="markdownIt-Anchor" href="#第一步第二步"></a> 第一步，第二步：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000329110.png" alt="" /></p><h2 id="第三步"><a class="markdownIt-Anchor" href="#第三步"></a> 第三步：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000506002.png" alt="" /></p><h2 id="第四步"><a class="markdownIt-Anchor" href="#第四步"></a> 第四步：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000620295.png" alt="" /></p><h2 id="第五步"><a class="markdownIt-Anchor" href="#第五步"></a> 第五步：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000742044.png" alt="" /></p><h2 id="更好用的方法p值判断法"><a class="markdownIt-Anchor" href="#更好用的方法p值判断法"></a> 更好用的方法：P值判断法</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000823479.png" alt="" /></p><h2 id="matlab-2"><a class="markdownIt-Anchor" href="#matlab-2"></a> matlab：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824001115009.png" alt="" /></p><h2 id="spss-2"><a class="markdownIt-Anchor" href="#spss-2"></a> spss</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824001828642.png" alt="image-20200824001828642" /></p><h1 id="如何检验数据是不是正态分布"><a class="markdownIt-Anchor" href="#如何检验数据是不是正态分布"></a> 如何检验数据是不是正态分布：</h1><h2 id="正态分布jb检验样本n30"><a class="markdownIt-Anchor" href="#正态分布jb检验样本n30"></a> 正态分布JB检验（样本n&gt;30)</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824002213034.png" alt="" /></p><h3 id="matlab-3"><a class="markdownIt-Anchor" href="#matlab-3"></a> matlab:</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824002642802.png" alt="" /></p><h2 id="shapiro-wikl检验"><a class="markdownIt-Anchor" href="#shapiro-wikl检验"></a> Shapiro-wikl检验：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824003312812.png" alt="" /></p><h2 id="q-q图数据量非常大不推荐用"><a class="markdownIt-Anchor" href="#q-q图数据量非常大不推荐用"></a> Q-Q图（数据量非常大，不推荐用：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824003542231.png" alt="" /></p><h1 id="斯皮尔曼spearman相关系数不要求正态分布"><a class="markdownIt-Anchor" href="#斯皮尔曼spearman相关系数不要求正态分布"></a> 斯皮尔曼spearman相关系数（不要求正态分布</h1><blockquote><p>不要求是正态分布</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/112d8172e1d44c3e0a271e01fe1943b1.svg" alt="img" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004004862.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004216828.png" alt="" /></p><h2 id="第二种定义matlab用的"><a class="markdownIt-Anchor" href="#第二种定义matlab用的"></a> 第二种定义（matlab用的</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/3077d509a28f0c638e01a3be025aa653.svg" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004318249.png" alt="" /></p><h2 id="matlab-4"><a class="markdownIt-Anchor" href="#matlab-4"></a> MATLAB</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004610707.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824005232578.png" alt="" /></p><h1 id="斯皮尔曼显著检验"><a class="markdownIt-Anchor" href="#斯皮尔曼显著检验"></a> 斯皮尔曼显著检验：</h1><h2 id="小样本"><a class="markdownIt-Anchor" href="#小样本"></a> 小样本</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004912349.png" alt="" /></p><h2 id="大样本"><a class="markdownIt-Anchor" href="#大样本"></a> 大样本：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824005040748.png" alt="image-20200824005040748" /></p><h1 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824005520813.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 相关性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机组成原理】微命令 微操作 微指令 微程序</title>
      <link href="/2020/08/23/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E3%80%91%E5%BE%AE%E5%91%BD%E4%BB%A4-%E5%BE%AE%E6%93%8D%E4%BD%9C-%E5%BE%AE%E6%8C%87%E4%BB%A4-%E5%BE%AE%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/08/23/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E3%80%91%E5%BE%AE%E5%91%BD%E4%BB%A4-%E5%BE%AE%E6%93%8D%E4%BD%9C-%E5%BE%AE%E6%8C%87%E4%BB%A4-%E5%BE%AE%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>复习机组的时候发现<font color=red>微命令</font>、<font color=#34a853>微指令</font>、<font color=#fbbc05>微操作</font>、<font color=#4285f4>微程序</font>、甚至控制信号这几个概念容易搞混。现在整理如下。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><blockquote><p><font color=red> 微命令</font>  -&gt;<font color=#34a853> 微指令</font> -&gt; <font color=#4285f4>微程序</font>    A -&gt; B表示由A组成B</p></blockquote><p>控制部件通过控制线向执行部件发出各种控制命令，通常这种控制命令叫做<font color=red>微命令</font>，是最小单位，组成<font color=#34a853>微指令</font> 。<br />在机器的一个CPU周期中，一组实现一定操作功能的<font color=red>微命令</font>的组合，构成一条<font color=#34a853>微指令</font><br />事实上一条机器指令的功能是由许多条<font color=#34a853>微指令</font>组成的序列来实现的。这个<font color=#34a853>微指令</font>序列通常叫做<font color=#4285f4>微程序</font>。</p><ul><li><font color=#fbbc05>微操作</font>：指令执行时必须完成的基本操作。例如，PC→AR，PC+1→ PC，RAM→IR。</li></ul><h1 id="自己的理解"><a class="markdownIt-Anchor" href="#自己的理解"></a> 自己的理解</h1><p>一条机器指令是由多个<font color=#34a853>微指令</font>组成的。这多个<font color=#34a853>微指令</font>序列又称作<font color=#4285f4>微程序</font>。</p><p>一条微指令是由多个<font color=red> 微命令</font>组成的。<font color=red> 微命令</font>又称作控制信号，<font color=red> 微命令</font>序列即控制信号序列。</p><hr /><h2 id="微操作和微指令的区别询问张瑞华老师得知"><a class="markdownIt-Anchor" href="#微操作和微指令的区别询问张瑞华老师得知"></a> 微操作和微指令的区别（询问张瑞华老师得知）：</h2><ul><li><p>一个<font color=#fbbc05>微操作</font>对应一条<font color=#34a853>微指令</font>，一条<font color=#34a853>微指令</font>可能有多个<font color=red>微命令</font>。</p></li><li><p><font color=#fbbc05>微操作</font>是动作，<font color=#34a853>微指令</font>是个编码。</p></li><li><p><font color=#fbbc05>微操作</font>是<font color=red>微命令</font>作用在硬件上的一个动作。课本上的<font color=#fbbc05>微操作</font>是在写指令流程时一条即一个箭头，这粒度比较粗。</p></li></ul><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://www.cnblogs.com/psymacome/p/8004756.html">微命令、微操作、微指令、微程序</a><br /><a href="https://zhidao.baidu.com/question/430749690.html">微程序 微命令 微指令概念区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】拟合算法</title>
      <link href="/2020/08/23/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8B%9F%E5%90%88%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/23/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8B%9F%E5%90%88%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言：</h1><p><img src= "/img/loading.gif" data-lazy-src="figures/%E6%8B%9F%E5%90%88%E7%AE%97%E6%B3%95/image-20200822232315265.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822232605096.png" alt="" /></p><h2 id="拟合和插值的区别"><a class="markdownIt-Anchor" href="#拟合和插值的区别"></a> 拟合和插值的区别</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822232330488.png" alt="" /></p><ul><li>插值要经过所有点</li><li>拟合不需要，只要这个曲线接近过所有点即可，只要保证误差足够小就可以。</li></ul><h2 id="最小二乘老生常谈了"><a class="markdownIt-Anchor" href="#最小二乘老生常谈了"></a> 最小二乘（老生常谈了</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822234917506.png" alt="" /></p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">arg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>的意思是使我们函数最小的参数</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822235203575.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822235412968.png" alt="Matlab求解最小二乘" /></p><h2 id="如何评价拟合的好坏"><a class="markdownIt-Anchor" href="#如何评价拟合的好坏"></a> 如何评价拟合的好坏</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001031412.png" alt="" /></p><ul><li>选取多个函数求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li><li>做一个取舍，不是次方越高越好，目的是让函数简单。</li><li><strong>并不是所有的函数都有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></strong>，不是线性函数一般不能用。</li></ul><h3 id="什么是线性函数我们指的是对参数为线性而不是对变量为线性"><a class="markdownIt-Anchor" href="#什么是线性函数我们指的是对参数为线性而不是对变量为线性"></a> 什么是线性函数？（我们指的是对参数为线性，而不是对变量为线性）</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001106906.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001242735.png" alt="" /></p><h3 id="计算r2的代码"><a class="markdownIt-Anchor" href="#计算r2的代码"></a> 计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>的代码</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001517809.png" alt="" /></p><h1 id="matlab-工具箱"><a class="markdownIt-Anchor" href="#matlab-工具箱"></a> matlab 工具箱</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001809078.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="figures/%E6%8B%9F%E5%90%88%E7%AE%97%E6%B3%95/image-20200823002020869.png" alt="" /></p><blockquote><p>点估计和区间估计</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823002553166.png" alt="" /></p><h2 id="中心化"><a class="markdownIt-Anchor" href="#中心化"></a> 中心化</h2><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823002524265.png" style="zoom:33%;" /><h1 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题：</h1><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=f(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823002917315.png" alt="" /></p><p>这里<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>没有意义（不是线性函数</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823003727472.png" alt="" /></p><h2 id="论文使用"><a class="markdownIt-Anchor" href="#论文使用"></a> 论文使用：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823004836146.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823004916611.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】插值算法</title>
      <link href="/2020/08/22/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/22/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224142580.png" alt="" /></p><h2 id="一维插值问题"><a class="markdownIt-Anchor" href="#一维插值问题"></a> 一维插值问题</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224245521.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224333723.png" alt="" /></p><blockquote><p>最常见的就是分段插值</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224447942.png" alt="原理" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224501850.png" alt="" /></p><blockquote><p>一般给n+1个点用n阶多项式</p></blockquote><h2 id="拉格朗日插值法"><a class="markdownIt-Anchor" href="#拉格朗日插值法"></a> 拉格朗日插值法：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224902577.png" alt="拉格朗日乘法" /></p><h3 id="缺陷龙格现象"><a class="markdownIt-Anchor" href="#缺陷龙格现象"></a> 缺陷：龙格现象</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225037684.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225135878.png" alt="" /></p><blockquote><p>因此用分段插值</p></blockquote><h2 id="分段插值"><a class="markdownIt-Anchor" href="#分段插值"></a> 分段插值</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225228954.png" alt="分段插值" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225319316.png" alt="分段二次插值\分段跑误插值" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225444170.png" alt="牛顿插值法，不是牛顿提出的" /></p><h2 id="拉格朗日插值-牛顿插值"><a class="markdownIt-Anchor" href="#拉格朗日插值-牛顿插值"></a> 拉格朗日插值、牛顿插值</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225554372.png" alt="与拉格朗日插值法相比，有继承性" /></p><blockquote><p>牛顿插值和拉格朗日插值法都有龙格现象</p></blockquote><h2 id="埃尔米特插值法重要"><a class="markdownIt-Anchor" href="#埃尔米特插值法重要"></a> 埃尔米特插值法（重要）</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225704274.png" alt="埃尔米特特插值" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225725177.png" alt="" /></p><h1 id="最常用分段三次埃尔米特插值和三次样条插值"><a class="markdownIt-Anchor" href="#最常用分段三次埃尔米特插值和三次样条插值"></a> 最常用：分段三次埃尔米特插值和三次样条插值</h1><h2 id="分段三次埃尔米特插值"><a class="markdownIt-Anchor" href="#分段三次埃尔米特插值"></a> 分段三次埃尔米特插值</h2><blockquote><p>matlab 种 pchip 有现成函数</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225942589.png" alt="" /></p><h2 id="三次样条插值"><a class="markdownIt-Anchor" href="#三次样条插值"></a> 三次样条插值：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822230735222.png" alt="" /></p><blockquote><p>条件很苛刻</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822230801664.png" alt="matlab方法" /></p><h2 id="对比"><a class="markdownIt-Anchor" href="#对比"></a> 对比：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231152794.png" alt="" /></p><h2 id="n维数据插值"><a class="markdownIt-Anchor" href="#n维数据插值"></a> n维数据插值：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231325373.png" alt="" /></p><h2 id="小技巧可以预测"><a class="markdownIt-Anchor" href="#小技巧可以预测"></a> 小技巧：可以预测</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231538496.png" alt="" /></p><h1 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231858847.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231931921.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】模糊综合评价模型</title>
      <link href="/2020/08/22/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%A8%A1%E7%B3%8A%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/08/22/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%A8%A1%E7%B3%8A%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="模糊综合评价模型"><a class="markdownIt-Anchor" href="#模糊综合评价模型"></a> 模糊综合评价模型</h1><p><strong>综合：多个指标，有多个权重</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821212648015.png" alt="" /></p><h1 id="概述引子"><a class="markdownIt-Anchor" href="#概述引子"></a> 概述（引子</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821212841494.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821213032085.png" alt="量就是各种数字" /></p><p>PS：量就是数字</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821213134182.png" alt="" /></p><h1 id="模糊集合"><a class="markdownIt-Anchor" href="#模糊集合"></a> 模糊集合</h1><h2 id="经典集合"><a class="markdownIt-Anchor" href="#经典集合"></a> 经典集合：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821213454247.png" alt="" /></p><p>特征函数？</p><h2 id="模糊集合-2"><a class="markdownIt-Anchor" href="#模糊集合-2"></a> 模糊集合：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821214009814.png" alt="" /></p><ul><li>用<strong>隶属度</strong>来描述元素在不在集合里。</li><li><strong>隶属函数</strong>充满随意性😁，没有约定俗成的方法，只要合理就可以了。</li></ul><blockquote><p>模糊集合的三种表示法（不重要</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821214709945.png" alt="" /></p><ul><li>Zadeh 这里只是一种计发，数学意义不强。这样放便积分</li><li>第二种计法不方便表示无穷的集合</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821215102453.png" alt="" /></p><ul><li>论域$\mho $可以是无限个元素</li></ul><h1 id="隶属函数的三种确定方法"><a class="markdownIt-Anchor" href="#隶属函数的三种确定方法"></a> 隶属函数的三种确定方法</h1><blockquote><p>虽然隶属函数充满随意性，但还是有三种方法的</p></blockquote><h2 id="模糊统计法数模中用的很少"><a class="markdownIt-Anchor" href="#模糊统计法数模中用的很少"></a> 模糊统计法（数模中用的很少</h2><p>因为需要统计，所以数模不咋用。但是发论文就会用到了</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821215823457.png" alt="因为需要统计，所以数模不咋用。但是发论文就会用到了" /></p><h2 id="借助已有的客观尺度"><a class="markdownIt-Anchor" href="#借助已有的客观尺度"></a> 借助已有的客观尺度</h2><blockquote><p>找到合适的指标</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821220043524.png" alt="" /></p><h2 id="指派法主观性强但建模中80都用这个"><a class="markdownIt-Anchor" href="#指派法主观性强但建模中80都用这个"></a> 指派法（主观性强，但建模中80%都用这个）</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821220303239.png" alt="image-20200821220303239" /></p><ul><li>用的比较多的是梯形分布</li></ul><h3 id="用的比较多的梯形分布"><a class="markdownIt-Anchor" href="#用的比较多的梯形分布"></a> 用的比较多的梯形分布</h3><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821220638211.png" alt="梯形分布例题" style="zoom:80%;" /><ul><li>求出一个值在每一个等级的隶属度</li></ul><h1 id="应用评价问题的概述"><a class="markdownIt-Anchor" href="#应用评价问题的概述"></a> 应用：评价问题的概述</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821232831047.png" alt="" /></p><ul><li>应用部分，符号发生了点变化，以这个为主。</li><li>因素集的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>和评语集的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>没有关系。</li></ul><h1 id="应用1一级综合模糊评价模型一个员工进行考核隶属度采用模糊统计法"><a class="markdownIt-Anchor" href="#应用1一级综合模糊评价模型一个员工进行考核隶属度采用模糊统计法"></a> 应用1：一级综合模糊评价模型：一个员工进行考核（隶属度采用：模糊统计法）</h1><blockquote><p>注意这个例子是对一个员工进行考核</p><p>一个员工有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个指标【业务能力，政治能力】</p><p>一个员工有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>种可能的评语【优秀，良好】</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233421488.png" alt="" /></p><h2 id="步骤一确定因素集n5相关性不强"><a class="markdownIt-Anchor" href="#步骤一确定因素集n5相关性不强"></a> 步骤一：确定因素集（n&lt;=5，相关性不强）</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233548764.png" alt="" /></p><h2 id="步骤二确定评语集"><a class="markdownIt-Anchor" href="#步骤二确定评语集"></a> 步骤二：确定评语集</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233600547.png" alt="" /></p><h2 id="步骤三确定权重"><a class="markdownIt-Anchor" href="#步骤三确定权重"></a> 步骤三：确定权重</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233620425.png" alt="" /></p><h3 id="司守奎教授怎么做"><a class="markdownIt-Anchor" href="#司守奎教授怎么做"></a> 司守奎教授怎么做</h3><ul><li>Delphi法：不断反馈，专家赋权</li></ul><hr /><h3 id="我们怎么做"><a class="markdownIt-Anchor" href="#我们怎么做"></a> 我们怎么做：</h3><ul><li>无数据：层次分析法</li><li>有数据：熵权法</li></ul><h2 id="步骤四确定模糊判断矩阵"><a class="markdownIt-Anchor" href="#步骤四确定模糊判断矩阵"></a> 步骤四：确定模糊判断矩阵</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233834594.png" alt="" /></p><p>例如：</p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233901046.png" style="zoom: 67%;" /><h2 id="步骤五综合评判"><a class="markdownIt-Anchor" href="#步骤五综合评判"></a> 步骤五：综合评判</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821234208591.png" alt="" /></p><p>矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>相当于要评价的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>个评语（对象），对于各个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个因素（指标的）权重的隶属度。</p><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821234936426.png" alt="" /></p><blockquote><p>确定权重不要忘记一致性检验</p></blockquote><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821235504476.png" style="zoom:80%;" /><h1 id="应用2一级综合模糊评价模型-单日空气质量评测隶属度采用指派法"><a class="markdownIt-Anchor" href="#应用2一级综合模糊评价模型-单日空气质量评测隶属度采用指派法"></a> 应用2：一级综合模糊评价模型 ：单日空气质量评测（隶属度采用：指派法）</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821235927773.png" alt="" /></p><h2 id="计算"><a class="markdownIt-Anchor" href="#计算"></a> 计算：</h2><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822000320842.png" style="zoom:80%;" /><blockquote><p>这里注意，四个评语的隶属度的和不一定为1</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822000416619.png" alt="" /></p><h1 id="应用3一级综合模糊评价模型-露天矿采有约束a指标权重矩阵可以用熵权法"><a class="markdownIt-Anchor" href="#应用3一级综合模糊评价模型-露天矿采有约束a指标权重矩阵可以用熵权法"></a> 应用3：一级综合模糊评价模型 ：露天矿采（有约束|A指标权重矩阵可以用熵权法）</h1><h2 id="确定隶属函数"><a class="markdownIt-Anchor" href="#确定隶属函数"></a> 确定隶属函数</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822000628259.png" alt="" /></p><p>偏大型：越大越好</p><p>偏小型：越小越好（也得转化成偏大型，有点类似正向化</p><blockquote><p>写作技巧：</p><p>根据专家的建议</p><p>根据他人写的文章</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822001327420.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822001406210.png" alt="" /></p><blockquote><p>这里B和R加权不为1很正常</p></blockquote><h1 id="应用4二级综合模糊评价模型-学生奖学金评价"><a class="markdownIt-Anchor" href="#应用4二级综合模糊评价模型-学生奖学金评价"></a> 应用4：二级综合模糊评价模型 ：学生奖学金评价</h1><p>指标太多，相关性很强。（10个指标，没分类。采用层次分析法就得两两比较）</p><h2 id="二级综合评价模型例子"><a class="markdownIt-Anchor" href="#二级综合评价模型例子"></a> 二级综合评价模型例子：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822002209890.png" alt="" /></p><h2 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h2><h3 id="第一步划分因素集"><a class="markdownIt-Anchor" href="#第一步划分因素集"></a> 第一步：划分因素集</h3><p>主观性强，看相关性</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822002401836.png" alt="" /></p><h3 id="第二步确定评语集"><a class="markdownIt-Anchor" href="#第二步确定评语集"></a> 第二步：确定评语集</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822002441488.png" alt="" /></p><p>把二级当一级来操作</p><h3 id="第三步再对一级尽速进行综合评判得出结果"><a class="markdownIt-Anchor" href="#第三步再对一级尽速进行综合评判得出结果"></a> 第三步：再对一级尽速进行综合评判得出结果</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822002654377.png" alt="" /></p><h2 id="应用4三级综合模糊评价模型-陶瓷评判"><a class="markdownIt-Anchor" href="#应用4三级综合模糊评价模型-陶瓷评判"></a> 应用4：三级综合模糊评价模型 ：陶瓷评判</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822003456700.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822003820226.png" alt="PS：指标必须进行正向话（指标越大越好）" /></p><blockquote><p>PS：指标必须进行正向话（指标越大越好）</p></blockquote><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h1><p>如果没有数据，评价数太多，尽量必要使用模糊综合评价模型（时间不够）</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】灰色关联分析</title>
      <link href="/2020/08/20/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%81%B0%E8%89%B2%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/"/>
      <url>/2020/08/20/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%81%B0%E8%89%B2%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>进行系统分析和综合评价。</p><p>根据图形相似程度进行分析。（灰色系统是国内的人提出的，回归分析是国外人推荐的。）</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820220922615.png" alt="概述" /></p><h1 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h1><h2 id="步骤一画统计图-进行一些简单的分析"><a class="markdownIt-Anchor" href="#步骤一画统计图-进行一些简单的分析"></a> 步骤一：画统计图、进行一些简单的分析</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820221737569.png" alt="" /></p><p>用回归分析的多重共线性问题？</p><h2 id="步骤二确定分析序列"><a class="markdownIt-Anchor" href="#步骤二确定分析序列"></a> 步骤二：确定分析序列</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820221851322.png" alt="" /></p><h2 id="步骤三对数据进行预处理去量纲-简化计算"><a class="markdownIt-Anchor" href="#步骤三对数据进行预处理去量纲-简化计算"></a> 步骤三：对数据进行预处理（去量纲、简化计算）</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820221935947.png" alt="为什么这样做（解释不清，大家都这么用）" /></p><h2 id="步骤四计算子序列和母序列的关联系数"><a class="markdownIt-Anchor" href="#步骤四计算子序列和母序列的关联系数"></a> 步骤四：计算子序列和母序列的关联系数</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820222525637.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820222637406.png" alt="" /></p><p>注意分辨系数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ρ</span></span></span></span></p><h2 id="步骤五计算灰色关联度"><a class="markdownIt-Anchor" href="#步骤五计算灰色关联度"></a> 步骤五：计算灰色关联度</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820223239840.png" alt="" /></p><h2 id="步骤六看谁关联度最大"><a class="markdownIt-Anchor" href="#步骤六看谁关联度最大"></a> 步骤六：看谁关联度最大</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820223310561.png" alt="" /></p><h1 id="讨论"><a class="markdownIt-Anchor" href="#讨论"></a> 讨论：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820223801106.png" alt="" /></p><h1 id="灰色关联分析用于综合评价"><a class="markdownIt-Anchor" href="#灰色关联分析用于综合评价"></a> 灰色关联分析用于综合评价</h1><ul><li><p>AHP用于没有数据</p></li><li><p>TOPSIS用于有数据</p></li><li><p>灰色关联分析用于有数据</p></li></ul><hr /><p>TOPSIS 确定熵权：</p><ul><li>层次分析法（AHP</li><li>熵权法</li><li><s>灰色关联度（忽略掉，极少用）</s></li></ul><h2 id="步骤-2"><a class="markdownIt-Anchor" href="#步骤-2"></a> 步骤：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820224423285.png" alt="步骤" /></p><p>步骤二的预处理是灰色关联分析的预处理</p><h3 id="matlab的技巧"><a class="markdownIt-Anchor" href="#matlab的技巧"></a> matlab的技巧</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820225207492.png" alt="用于求每列最大值" /></p><h1 id="归一化和标准化的区别"><a class="markdownIt-Anchor" href="#归一化和标准化的区别"></a> 归一化和标准化的区别</h1><p>归一化：方便度量、方便分析</p><p>标准化：去掉量纲</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】熵权法</title>
      <link href="/2020/08/20/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%86%B5%E6%9D%83%E6%B3%95/"/>
      <url>/2020/08/20/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%86%B5%E6%9D%83%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="熵权法"><a class="markdownIt-Anchor" href="#熵权法"></a> 熵权法</h1><h1 id="问题的提出层次分析法主观性太强"><a class="markdownIt-Anchor" href="#问题的提出层次分析法主观性太强"></a> 问题的提出:层次分析法主观性太强</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820212240743.png" alt="" /></p><p>变异程度是方差（变化不大</p><h2 id="如何衡量信息量的大小为什么是方差"><a class="markdownIt-Anchor" href="#如何衡量信息量的大小为什么是方差"></a> 如何衡量信息量的大小（为什么是方差？</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820212448869.png" alt="image-20200820212448869" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820212932888.png" alt="" /></p><h3 id="信息熵"><a class="markdownIt-Anchor" href="#信息熵"></a> 信息熵:</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213257527.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213438001.png" alt="" /></p><h1 id="熵权法的步骤"><a class="markdownIt-Anchor" href="#熵权法的步骤"></a> 熵权法的步骤</h1><h2 id="第一步判断矩阵中是否有负数"><a class="markdownIt-Anchor" href="#第一步判断矩阵中是否有负数"></a> 第一步：判断矩阵中是否有负数</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213636433.png" alt="" /></p><h2 id="第二部计算概率感觉有点问题但大家都这样"><a class="markdownIt-Anchor" href="#第二部计算概率感觉有点问题但大家都这样"></a> 第二部：计算概率（感觉有点问题，但大家都这样</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213712434.png" alt="感觉这样做有待商榷，但都这样用" /></p><h3 id="第三步计算信息熵并归一化得到熵权"><a class="markdownIt-Anchor" href="#第三步计算信息熵并归一化得到熵权"></a> 第三步：计算信息熵，并归一化得到熵权</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213922636.png" alt="" /></p><h2 id="背后原理"><a class="markdownIt-Anchor" href="#背后原理"></a> 背后原理</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820214025623.png" alt="" /></p><h1 id="熵权法和层次分析法"><a class="markdownIt-Anchor" href="#熵权法和层次分析法"></a> 熵权法和层次分析法</h1><h2 id="熵权法-2"><a class="markdownIt-Anchor" href="#熵权法-2"></a> 熵权法：</h2><p>不一定太科学，值得商榷。</p><h2 id="层次分析法"><a class="markdownIt-Anchor" href="#层次分析法"></a> 层次分析法：</h2><p>专家赋权，太主观。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h2><p>我觉得比赛可以俩都用，毕竟熵权法可以直接调用。</p><p>解决综合评价的 层次分析法和TOPSIS<br />熵权法可以用来给TOPSIS赋权</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】TOPSIS|优劣解距离法</title>
      <link href="/2020/08/19/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91TOPSIS-%E4%BC%98%E5%8A%A3%E8%A7%A3%E8%B7%9D%E7%A6%BB%E6%B3%95/"/>
      <url>/2020/08/19/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91TOPSIS-%E4%BC%98%E5%8A%A3%E8%A7%A3%E8%B7%9D%E7%A6%BB%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="topsis"><a class="markdownIt-Anchor" href="#topsis"></a> TOPSIS</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819214718017.png" alt="前言" /></p><h2 id="层次分析法的局限"><a class="markdownIt-Anchor" href="#层次分析法的局限"></a> 层次分析法的局限：</h2><ul><li>决策层不能太多</li><li>如果又数据已知，不能利用这些数据</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819214852267.png" alt="层次分析法局限性" /></p><h1 id="问题的提出"><a class="markdownIt-Anchor" href="#问题的提出"></a> 问题的提出：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819215436539.png" alt="提出问题" /></p><h2 id="为什么要这样算"><a class="markdownIt-Anchor" href="#为什么要这样算"></a> 为什么要这样算：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819215559782.png" alt="归一化" /></p><p>为什么制表 要 max min</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819215623623.png" alt="为什么要这样归一化" /></p><h2 id="极大型效益型指标和极小型成本型指标"><a class="markdownIt-Anchor" href="#极大型效益型指标和极小型成本型指标"></a> 极大型（效益型）指标和极小型（成本型）指标：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819215855541.png" alt="" /></p><h3 id="统一指标类型"><a class="markdownIt-Anchor" href="#统一指标类型"></a> 统一指标类型</h3><p><strong>指标正向化</strong>（最常用）（PS：当然可以反过来</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819220105950.png" alt="" /></p><h3 id="标准化消去量纲"><a class="markdownIt-Anchor" href="#标准化消去量纲"></a> 标准化（消去量纲）：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819220413290.png" alt="标准化（消去量纲）" /></p><h2 id="如何计算"><a class="markdownIt-Anchor" href="#如何计算"></a> 如何计算：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819220607697.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819220719914.png" alt="" /></p><p>看似麻烦，其实很简单。就是每取出每一列的最大值和最小值形成单独的向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Z</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">Z^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Z</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">Z^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span>然后每一行去用欧式距离算量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>D</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding="application/x-tex">D_i^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.088326em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.811462em;"><span style="top:-2.4231360000000004em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>D</mi><mi>i</mi><mo>−</mo></msubsup></mrow><annotation encoding="application/x-tex">D_i^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.088326em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.811462em;"><span style="top:-2.4231360000000004em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221322949.png" alt="" /></p><h2 id="因此topsis被称为优劣解距离法"><a class="markdownIt-Anchor" href="#因此topsis被称为优劣解距离法"></a> 因此TOPSIS被称为优劣解距离法：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221413159.png" alt="TOPSIS介绍" /></p><h1 id="深入topsis"><a class="markdownIt-Anchor" href="#深入topsis"></a> 深入：TOPSIS</h1><h2 id="第一步原始矩阵正向话"><a class="markdownIt-Anchor" href="#第一步原始矩阵正向话"></a> 第一步：原始矩阵正向话</h2><h3 id="常见的四种指标"><a class="markdownIt-Anchor" href="#常见的四种指标"></a> 常见的四种指标</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221521514.png" alt="" /></p><h3 id="极小型到极大型"><a class="markdownIt-Anchor" href="#极小型到极大型"></a> 极小型到极大型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221623113.png" alt="" /></p><h3 id="中间型到极大型"><a class="markdownIt-Anchor" href="#中间型到极大型"></a> 中间型到极大型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221657855.png" alt="" /></p><h3 id="区间型到最大型"><a class="markdownIt-Anchor" href="#区间型到最大型"></a> 区间型到最大型</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221910539.png" alt="" /></p><h2 id="第二步正向化标准矩阵消除量纲影响"><a class="markdownIt-Anchor" href="#第二步正向化标准矩阵消除量纲影响"></a> 第二步：正向化标准矩阵（消除量纲影响</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819222148109.png" alt="" /></p><h2 id="第三步计算得分并归一化"><a class="markdownIt-Anchor" href="#第三步计算得分并归一化"></a> 第三步：计算得分并归一化</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819222219776.png" alt="" /></p><h3 id="为什么要归一化"><a class="markdownIt-Anchor" href="#为什么要归一化"></a> 为什么要归一化？</h3><ul><li>在基于梯度下降的算法中，使用特征归一化方法将特征统一量纲，能够提高模型收敛速度和最终的模型精度。</li><li>归一化目的就是将不同尺度上的评判结果统一到一个尺度上，从而可以作比较，作计算</li><li>矢量是归一化比较常见的使用场景。因为一般矢量只关心方向，距离，长度没有意义。因此归一化就是将x，y，z3个值放入0-1.0的范围内。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819222926875.png" alt="" /></p><h1 id="模型扩展上面是默认所有指标权重相同"><a class="markdownIt-Anchor" href="#模型扩展上面是默认所有指标权重相同"></a> 模型扩展（上面是默认所有指标权重相同）：</h1><h2 id="带权重的topsis用层次分析法赋予指标权重"><a class="markdownIt-Anchor" href="#带权重的topsis用层次分析法赋予指标权重"></a> 带权重的TOPSIS（用层次分析法赋予指标权重</h2><p>因为各个指标有不同权重，只需用层次分析法求出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>稍作修改模型即可：</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819223523864.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】排队论&amp;层次分析法（AHP</title>
      <link href="/2020/08/19/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8E%92%E9%98%9F%E8%AE%BA-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90/"/>
      <url>/2020/08/19/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8E%92%E9%98%9F%E8%AE%BA-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="排队论"><a class="markdownIt-Anchor" href="#排队论"></a> 排队论</h1><p>这篇博客写的太好了，我就偷懒一点：</p><p><a href="https://blog.csdn.net/sunyueqinghit/article/details/81562138">数学建模之排队论</a></p><p>排队论的一般模型：</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20180810130528383.jpg" alt="img" /></p><p>这里要注意，分析清除排队论种的排队顾客具体是谁。19年国赛C的顾客就是<strong>汽车司机</strong>，不是乘客。</p><h2 id="排队系统的组成和特征"><a class="markdownIt-Anchor" href="#排队系统的组成和特征"></a> 排队系统的组成和特征</h2><p>一般的排队过程都由输入过程、排队规则、服务过程三部分组成</p><h3 id="排队规则"><a class="markdownIt-Anchor" href="#排队规则"></a> 排队规则</h3><p>排队规则指到达排队系统的顾客按怎样的规则排队等待，可分为损失制，等待制和 混合制三种.</p><ol><li>损失制（消失制）。当顾客到达时，所有的服务台均被占用，顾客随即离去。</li><li>等待制。当顾客到达时，所有的服务台均被占用，顾客就排队等待，直到接 受完服务才离去。例如出故障的机器排队等待维修就是这种情况。</li></ol><p>排队方式还分为单列、多列和循环队列。</p><h3 id="服务过程"><a class="markdownIt-Anchor" href="#服务过程"></a> 服务过程</h3><ul><li><p>先到先服务 FCFS</p></li><li><p>后到先服务 LCFS （很少见）</p></li></ul><h3 id="排队模型的符号表示直接复制了"><a class="markdownIt-Anchor" href="#排队模型的符号表示直接复制了"></a> 排队模型的符号表示（直接复制了</h3><p>排队模型用六个符号表示，在符号之间用斜线隔开，即 X/Y/Z/A/B/C 。第一 个符号 X 表示顾客到达流或顾客到达间隔时间的分布；第二个符号Y 表示服务时间的 分布；第三个符号Z 表示服务台数目；第四个符号 A是系统容量限制；第五个符号B 是 顾客源数目；第六个符号C 是服务规则，如先到先服务 FCFS，后到先服务 LCFS 等。并 约定，如略去后三项，即指X/Y/Z/∞/∞/FCFS的情形。我们只讨论先到先服务 FCFS 的情形，所以略去第六项。<br />表示顾客到达间隔时间和服务时间的分布的约定符号为：<br />M —指数分布（M 是 Markov 的字头，因为指数分布具有无记忆性，即 Markov 性）；<br />D—确定型（Deterministic）；<br />Ek —k 阶爱尔朗(Erlang)分布；<br />G —一般（general）服务时间的分布；<br />GI —一般相互独立（General Independent）的时间间隔的分布。<br />例如，M/M/1表示相继到达间隔时间为指数分布、服务时间为指数分布、单服务台、等待制系统。<br />D/M/c/表示确定的到达时间、服务时间为指数分布、c个平行服务台（但顾客是一队）的模型。</p><h2 id="求解方法"><a class="markdownIt-Anchor" href="#求解方法"></a> 求解方法：</h2><h3 id="简单时公式推导"><a class="markdownIt-Anchor" href="#简单时公式推导"></a> 简单时，公式推导：</h3><h3 id="多服务台模型-mms也是19年c会用到的模型"><a class="markdownIt-Anchor" href="#多服务台模型-mms也是19年c会用到的模型"></a> 多服务台模型（ M/M/s/∞）（也是19年C会用到的模型</h3><p>设顾客单个到达，相继到达时间间隔服从参数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">λ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> 的负指数分布，系统中共有s个 服务台，每个服务台的服务时间相互独立，且服从参数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">μ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span> 的负指数分布。当顾客到达时，若有空闲的服务台则马上接受服务，否则便排成一个队列等待，等待时间为无限。</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20180810133729317.jpg" alt="img" /></p><h3 id="复杂时计算机模拟"><a class="markdownIt-Anchor" href="#复杂时计算机模拟"></a> 复杂时，计算机模拟：</h3><p>我把代码放在了Dropbox里</p><h1 id="层次分析法ahp"><a class="markdownIt-Anchor" href="#层次分析法ahp"></a> 层次分析法（AHP</h1><p>这个清风老师的视频真的讲的太好了。感觉亏了一个亿</p><h2 id="解决评价类问题要想到的问题"><a class="markdownIt-Anchor" href="#解决评价类问题要想到的问题"></a> 解决评价类问题要想到的问题</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200818235841311.png" alt="image-20200818235841311" /></p><p>评价类问题的核心就是要有这张权重表格：</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819000036572.png" alt="image-20200819000036572" /></p><p>在没有数据的情况下，可以采用层次分析法，来衡量这些参数：</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200818220913536.png" alt="image-20200818220913536" /></p><h2 id="指标如何得出"><a class="markdownIt-Anchor" href="#指标如何得出"></a> 指标如何得出？</h2><p>核心求出<strong>判断矩阵</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200818221216938.png" alt="" /></p><h3 id="权重计算方法的干活"><a class="markdownIt-Anchor" href="#权重计算方法的干活"></a> 权重计算方法的干活：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819000241019.png" alt="image-20200819000241019" /></p><h2 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> PS</h2><p>之前雅莉姐姐在 Week share 种介绍了用SPSS求解主成分分析，基本就是一键呆瓜式操作，明天试一试</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】2019国赛C</title>
      <link href="/2020/08/16/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%912019%E5%9B%BD%E8%B5%9BC/"/>
      <url>/2020/08/16/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%912019%E5%9B%BD%E8%B5%9BC/</url>
      
        <content type="html"><![CDATA[<h1 id="司守奎教授的讲解"><a class="markdownIt-Anchor" href="#司守奎教授的讲解"></a> 司守奎教授的讲解</h1><p>核心：这题不应该往<strong>排队论</strong>和<strong>综合评价</strong>上靠，而应该进行<strong>机理分析</strong>，整个讲解过程没有用到高大上的模型，都是一步一步推到出来的。</p><h2 id="第一问"><a class="markdownIt-Anchor" href="#第一问"></a> 第一问：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled.png" alt="出租车司机经济效益的核心两点是排队等待的出租车数量和可能乘坐出租车的乘客数量" /></p><h3 id="问题核心考虑出租车的经济效益"><a class="markdownIt-Anchor" href="#问题核心考虑出租车的经济效益"></a> 问题核心，考虑出租车的经济效益：</h3><p>即考虑返回成本和等待时间</p><h4 id="返回成本"><a class="markdownIt-Anchor" href="#返回成本"></a> 返回成本：</h4><p>确定</p><h4 id="等待成本"><a class="markdownIt-Anchor" href="#等待成本"></a> 等待成本：</h4><ul><li>排队等待的出租车数量</li><li>可能乘坐出租车的乘客数量</li></ul><h2 id="影响出租车效益的主要因素"><a class="markdownIt-Anchor" href="#影响出租车效益的主要因素"></a> 影响出租车效益的主要因素：</h2><h3 id="1空载成本-2-载客收益"><a class="markdownIt-Anchor" href="#1空载成本-2-载客收益"></a> (1)空载成本 (2) 载客收益：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%201.png" alt="" /></p><h3 id="3乘客数"><a class="markdownIt-Anchor" href="#3乘客数"></a> （3）乘客数：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%202.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%203.png" alt="" /></p><p><font color=red>**小tick：**这个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>  是随意取得，经验函数。</font></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%204.png" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 取什么也无所谓，80% 90% 100%都行，关键要有。</p><h3 id="4出租车等待时间"><a class="markdownIt-Anchor" href="#4出租车等待时间"></a> （4）出租车等待时间</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%205.png" alt="" /></p><ul><li>可以考虑排队论，但注意是出租车在排队</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%206.png" alt="" /></p><p>如果想连续考虑，可以做个拟合，变成连续函数。也可以离散掉，以min为单位</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%207.png" alt="" /></p><p><font color=red>做个假设，服务时间服从于负指数函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>（<strong>小tick）</strong></font></p><p>（基本的排队论模型是按照常数算的，效果差一点</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%208.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%209.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2010.png" alt="" /></p><p>这里的公式看似复杂，实则就是排队论的推到。而且式中大部分为常数，代入即可。</p><h3 id="5等待成本"><a class="markdownIt-Anchor" href="#5等待成本"></a> （5）等待成本</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2011.png" alt="" /></p><h3 id="6空载的潜在损失"><a class="markdownIt-Anchor" href="#6空载的潜在损失"></a> （6）空载的潜在损失</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2012.png" alt="" /></p><h3 id="7决策准则"><a class="markdownIt-Anchor" href="#7决策准则"></a> （7）决策准则</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2013.png" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 应该是基本成本（空载路费？</p><h2 id="第二问"><a class="markdownIt-Anchor" href="#第二问"></a> 第二问：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2014.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2015.png" alt="" /></p><h2 id="第三问"><a class="markdownIt-Anchor" href="#第三问"></a> 第三问：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2016.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2017.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2018.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2019.png" alt="" /></p><p>保证安全条件下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>不会太大</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2020.png" alt="" /></p><p>这个题，这里是讨论的乘客足够多的情况，而不是乘客不够的情况，把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>简化了，为常数，易于分析。</p><h3 id="第四问"><a class="markdownIt-Anchor" href="#第四问"></a> 第四问</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2021.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200816213650272.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200816213709592.png" alt="" /></p><p>没有后面的视频了，第四问没有听，可惜。</p><h1 id="优秀论文c044-c137-c308阅读"><a class="markdownIt-Anchor" href="#优秀论文c044-c137-c308阅读"></a> 优秀论文C044、C137、C308阅读</h1><p>这个明天晚上之前整理出来</p><h1 id="反思分析"><a class="markdownIt-Anchor" href="#反思分析"></a> 反思分析</h1><p>去年我们队也做的C题，我队这个题感触颇多。</p><h2 id="值得肯定的地方"><a class="markdownIt-Anchor" href="#值得肯定的地方"></a> 值得肯定的地方：</h2><p>确实是机理分析了</p><h2 id="需要改进的地方"><a class="markdownIt-Anchor" href="#需要改进的地方"></a> 需要改进的地方：</h2><ul><li><p>重点错误，花费了大量时间在第三问上，忽略了第一问，导致第一问篇幅太短，推导太过随意</p></li><li><p>没有进行模型检验，只是简单的得出结果。相当于文章写了一半没写完，这是硬伤。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白嫖阿里云实力到期后使用竞价实例迁移系统</title>
      <link href="/2020/08/15/%E7%99%BD%E5%AB%96%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E5%8A%9B%E5%88%B0%E6%9C%9F%E5%90%8E%E4%BD%BF%E7%94%A8%E7%AB%9E%E4%BB%B7%E5%AE%9E%E4%BE%8B%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/08/15/%E7%99%BD%E5%AB%96%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E5%8A%9B%E5%88%B0%E6%9C%9F%E5%90%8E%E4%BD%BF%E7%94%A8%E7%AB%9E%E4%BB%B7%E5%AE%9E%E4%BE%8B%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>寒假嫖的阿里云2h4g实例到期了。因为配置了web服务器，嫌重新配置比较麻烦，听天天哥哥说竞价实例比较便宜，现利用竞价实例迁移系统。</p><h1 id="创建自定义镜像"><a class="markdownIt-Anchor" href="#创建自定义镜像"></a> 创建自定义镜像：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815193558402.png" alt="" /></p><p>这里注意一下你的实例地区，要和购买的竞价实例地区一致</p><h2 id="迁移镜像到购买地区"><a class="markdownIt-Anchor" href="#迁移镜像到购买地区"></a> 迁移镜像到购买地区：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815193651547.png" alt="点击复制镜像" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815193720741.png" alt="选择竞价实例地址" /></p><p>等待镜像创建、迁移完成。镜像创建和迁移都要等一段时间。</p><h1 id="购买实例"><a class="markdownIt-Anchor" href="#购买实例"></a> 购买实例：</h1><p>在创建实例界面选择抢式实例并选择地区和配置。</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815193416811.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815194032750.png" alt="" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815194255556.png" alt="流量计费，配置安全组" /></p><p>确认订单即可</p><h1 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h1><p>这样操作会直接将原系统迁移过来，大功告成</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何深入浅出的理解Kosaraju</title>
      <link href="/2020/06/28/%E5%A6%82%E4%BD%95%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9A%84%E7%90%86%E8%A7%A3kosaraju/"/>
      <url>/2020/06/28/%E5%A6%82%E4%BD%95%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9A%84%E7%90%86%E8%A7%A3kosaraju/</url>
      
        <content type="html"><![CDATA[<h1 id="如何深入浅出的理解kosaraju"><a class="markdownIt-Anchor" href="#如何深入浅出的理解kosaraju"></a> 如何深入浅出的理解Kosaraju</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>今天想起来Kosaraju，网上关于这个算法的介绍比较少。（毕竟Tarjan太强了）。但是Tarjan和Kosaraju的复杂度都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>V</mi><mo>+</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(V+E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>的，Kosaraju的常数要大一点。（网上有的博客说kosaraju会卡爆栈，个人感觉不会，退化成链的情况Tarjan和Kosaraju都会一搜到底）。</p><p>那为什么Kosaraju常数大还要学它呢，用Tarjan不好吗？</p><p>因为它简单、好理解啊。毕竟Tarjan难理解是出了名的。</p><h1 id="正题"><a class="markdownIt-Anchor" href="#正题"></a> 正题</h1><h2 id="一些必要概念"><a class="markdownIt-Anchor" href="#一些必要概念"></a> 一些必要概念</h2><p>网上介绍各种概念五花八门，不够深入浅出。首先要理解这几个概念：</p><ul><li>前序序列（从一点开始遍历，结点进入的序列）</li><li>后序序列（从一点开始遍历，结点退出的序列）</li><li><strong>逆后序序列</strong>（就是后序序列的逆序，没什么高深的意思，<s>所以百度搜不到</s>）</li><li>图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span></li><li>反图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>G</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">G&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>（将图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span>的各个边反过来重新建图，出边改入边）</li><li>强连通分量SCC（移步百度）</li></ul><p>求前序序列和后序序列的代码（如果上面不理解，看看代码就懂了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, dcnt, fcnt, c[N], d[N], vis[N], f[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    d[x] = ++dcnt;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[y]) dfs(y);</span><br><span class="line">    &#125;</span><br><span class="line">    v[x].n = ++fcnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dcnt = fcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) dfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kosaraju如和实现"><a class="markdownIt-Anchor" href="#kosaraju如和实现"></a> Kosaraju如和实现</h2><p>两遍DFS：</p><ul><li><p>第一遍，求出图G的逆后序序列。</p></li><li><p>第二遍，根据逆后序序列，在反图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>G</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">G&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>上进行DFS，每次能dfs点就在一个强连通分量里。</p></li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, c[N], dfn[N], vis[N], dcnt, scnt;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G1[N], G2[N];  <span class="comment">// G1 原图，G2 反向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;         <span class="comment">// 求后序序列</span></span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G1[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[y]) dfs1(y);</span><br><span class="line">    &#125;</span><br><span class="line">    dfn[++dcnt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    c[x] = scnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G2[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c[y]) dfs2(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kosaraju</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dcnt = scnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) dfs1(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反过来遍历dfn就是逆后序序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c[dfn[i]]) ++scnt, dfs2(dfs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="why如何理解"><a class="markdownIt-Anchor" href="#why如何理解"></a> Why？如何理解</h2><p>详细的数学证明请参考《算法导论》，这里给出如何一种正确理解的方法。</p><p>首先要知道：</p><ul><li>原图和反图具有相同的SCC（强连通分量）。</li></ul><p>那为什么要求后序序列或者逆后序序列呢？</p><p>实际上是在求一个拓扑排序，但是带环图没有拓扑排序的概念，这个逆后序序列就差不多是原图缩点后的拓扑排序序列。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/Anadem/blogImg/raw/master/img/image-20200627235415880.png" alt="image-20200627235415880" /></p><p>如图所示，从1号节点开始逆后序序列为：8、1、3、2、7、4、5、6</p><p>缩点后就是：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/Anadem/blogImg/raw/master/img/image-20200813170642521.png" alt="image-20200813170642521" /></p><p><strong>此图的拓扑排序为：S3（8）、S2（1、3、2）、S1（7、4、5、6）</strong></p><p>然后如果在反图上按照逆拓扑序列遍历的话每次只会遍历到一个SCC。这样，这个算法就可以正常求出所有强连通分量了</p><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><p>为什么要在反图上做逆后序序列？在原图上做后序序列不可以吗？</p><p>是这样的，上述给的例子，在原图上做后序序列是完全可以的。但只要稍加改动，原图的逆序序列有很多种（并不唯一）。比如：</p><ul><li>逆后序序列1：8、1、3、2、7、4、5、6</li><li>逆后序序列2：8、1、3、7、4、5、6、2</li></ul><p>序列1、2都是合法的逆序序列。上面介绍用的逆后序序列1。</p><p>他们的后序序列：</p><ul><li>后序序列1：6、5、4、7、<strong>2</strong>、<strong>3</strong>、<strong>1</strong>、8</li><li>后序序列2：<strong>2</strong>、6、5、4、7、<strong>3</strong>、<strong>1</strong>、8</li></ul><p>这里大家需要手动模拟一下（很简单），如果在原图上采用后序序列2，会得到错误的答案。但是在反图上采用逆后序序列2，答案仍旧正确。</p><p>因此我们只能在反图上做逆后序序列。</p>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计思维实践 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速理解并记住 C 语言中的 typedef</title>
      <link href="/2020/06/27/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3typedef/"/>
      <url>/2020/06/27/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3typedef/</url>
      
        <content type="html"><![CDATA[<p>假设有如下代码，你声明了一个<strong>函数指针</strong><code>funa</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">funa</span> <span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br></pre></td></tr></table></figure><p>编译器就知道这一行声明了一个<strong>函数指针</strong>，其指向的函数接收一个<code>int</code>类型的参数，返回值为<code>int</code>。</p><p>现在项目经理给编译器作者说，“我要有一个typedef的功能，要能给某个类型起别名。”</p><p>编译器作者说：“你不早说，我代码都写完了”。</p><p>抱怨归抱怨，编译器作者但还是得写，那就用之前的轮子吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">int</span> *<span class="title">Funa</span> <span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br></pre></td></tr></table></figure><p>项目经理说：“这不就何之前一样了吗”</p><p>编译器作者说：“谁让你不早说，这样我就能直接拿轮子了”</p><p>项目经理说：“也好，这样也好记住”。</p><p>那么：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Funa p1;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">p2</span> <span class="params">(<span class="keyword">int</span> k)</span></span></span><br></pre></td></tr></table></figure><p><code>p1</code>和<code>p2</code>是等价的。</p><p>因为<code>Funa</code>和<code>int * (int k)</code>是一个类型，<code>p1</code>和<code>p2</code>是一个类型。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://www.zhihu.com/question/19894694/answer/81246243">如何理解 C 语言中的 typedef ？ - 霄池的回答 - 知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 指针 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ 模板中 class T 和 typename T 的区别</title>
      <link href="/2020/04/18/c++%20%E6%A8%A1%E6%9D%BF%E4%B8%AD%20class%20T%20%E5%92%8C%20typename%20T%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/04/18/c++%20%E6%A8%A1%E6%9D%BF%E4%B8%AD%20class%20T%20%E5%92%8C%20typename%20T%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="c-模板中-class-t-和-typename-t的区别"><a class="markdownIt-Anchor" href="#c-模板中-class-t-和-typename-t的区别"></a> c++ 模板中 <code>&lt;class T&gt;</code> 和 <code>&lt;typename T&gt;</code>的区别</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>一直感觉<code>template &lt;class T&gt;</code>，今天查了一下。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p><code>template&lt;class T&gt;</code>和<code>template&lt;typename T&gt;</code>都可以用来定义函数模板和类模板，在使用上，他们俩没有本质的区别。</p><p>在模板声明中，<code>typename</code> 可用作 <code>class</code> 的代替品，以声明类型模板形参和模板形参 (C++17 起)。</p><p>在C++早期版本中，没有<code>typename</code>这个关键字，所以在模板定义的时候便使用了<code>class</code>。</p><p>因此现在使用<code>typename</code>更加合适。</p><h1 id="typename的其它用法"><a class="markdownIt-Anchor" href="#typename的其它用法"></a> <code>typename</code>的其它用法</h1><ul><li>在模板声明中，<code>typename</code> 可用作<code>class</code>的代替品，以声明类型模板形参和模板形参 (C++17 起)。</li><li>在模板的声明或定义内，<code>typename</code> 可用于声明某个待决的有限定名是类型。</li><li>在模板的声明或定义内， (C++11 前)<code>typename</code> 可在非待决的有限定类型名之前使用。此情况下它没有效果。</li><li>在类型要求的要求中。(C++20 起)</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 程序设计思维实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django数据库操作 —— 干净的重置migration</title>
      <link href="/2020/03/27/Django%20%E9%87%8D%E7%BD%AE%E8%BF%81%E7%A7%BB%E6%96%87%E4%BB%B6/"/>
      <url>/2020/03/27/Django%20%E9%87%8D%E7%BD%AE%E8%BF%81%E7%A7%BB%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>随着项目需求的增加：</p><ul><li>Django的迁移文件越来越大，</li><li>并且遇到models文件中如果使用了自定义存储字段。不再使用后删除会报错的情况。</li></ul><p>重置迁移文件后解决了上述问题。</p><h2 id="情景一不需要原有的数据库数据"><a class="markdownIt-Anchor" href="#情景一不需要原有的数据库数据"></a> 情景一：不需要原有的数据库数据</h2><ol><li>首先删除数据库中的相关APP下的数据表</li><li>然后删除APP下的migration模块中的所有 文件，<a href="http://xn--init-ps5fn029a.py">除了init.py</a> 文件</li><li>执行下面的命令</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py makemigrations</span></span><br><span class="line"><span class="xml">python manage.py migrate</span></span><br></pre></td></tr></table></figure><h2 id="情景二不想要删除现有的数据库只是想重新建立-migration-文件"><a class="markdownIt-Anchor" href="#情景二不想要删除现有的数据库只是想重新建立-migration-文件"></a> 情景二：不想要删除现有的数据库，只是想重新建立 migration 文件</h2><p>这个情况是开发中最为常见的，也是操作起来稍微复杂一点的情况，但是只要遵循下面的操作步骤，就不会引发任何错误。</p><ol><li>首先要保证,目前的migration文件和数据库是同步的，通过执行</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py makemigrations</span></span><br></pre></td></tr></table></figure><p>2.查看当前项目下所有APP对应的已经生效的（已经成功执行的）migration文件，命令如下:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py showmigrations</span></span><br></pre></td></tr></table></figure><p>结果如下图所示:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">admin</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_logentry_remove_auto_add</span></span><br><span class="line"><span class="xml"> [X] 0003_logentry_add_action_flag_choices</span></span><br><span class="line"><span class="xml">api</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml">contenttypes</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_remove_content_type_name</span></span><br><span class="line"><span class="xml">explore</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_auto_20200223_0131</span></span><br><span class="line"><span class="xml"> [X] 0003_delete_exphoto</span></span><br><span class="line"><span class="xml"> [X] 0004_exphoto</span></span><br><span class="line"><span class="xml"> [X] 0005_auto_20200304_1652</span></span><br><span class="line"><span class="xml"> parent</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_auto_20200409_2248</span></span><br></pre></td></tr></table></figure><ol start="3"><li>重置你的APP的操作，使它们恢复到没有执行的状态，这里注意一下fake前面的符号，是两个“-”，另外，explore 是APP的名字。</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py migrate --fake explore zero</span></span><br></pre></td></tr></table></figure><p>重装完后进行检查：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py showmigrations</span></span><br></pre></td></tr></table></figure><p>如果是要重置的APP前面[x]变成了[ ]则操作正确：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">admin</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_logentry_remove_auto_add</span></span><br><span class="line"><span class="xml"> [X] 0003_logentry_add_action_flag_choices</span></span><br><span class="line"><span class="xml">api</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml">contenttypes</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_remove_content_type_name</span></span><br><span class="line"><span class="xml">explore</span></span><br><span class="line"><span class="xml"> [ ] 0001_initial</span></span><br><span class="line"><span class="xml"> [ ] 0002_auto_20200223_0131</span></span><br><span class="line"><span class="xml"> [ ] 0003_delete_exphoto</span></span><br><span class="line"><span class="xml"> [ ] 0004_exphoto</span></span><br><span class="line"><span class="xml"> [ ] 0005_auto_20200304_1652</span></span><br><span class="line"><span class="xml"> parent</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_auto_20200409_2248</span></span><br></pre></td></tr></table></figure><p><strong>这里要注意，如果有其它数据库的状态有[x]变成了[ ]，则该APP也要重置（因为外键的原因）</strong> 如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">admin</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_logentry_remove_auto_add</span></span><br><span class="line"><span class="xml"> [X] 0003_logentry_add_action_flag_choices</span></span><br><span class="line"><span class="xml">api</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml">contenttypes</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_remove_content_type_name</span></span><br><span class="line"><span class="xml">explore</span></span><br><span class="line"><span class="xml"> [ ] 0001_initial</span></span><br><span class="line"><span class="xml"> [ ] 0002_auto_20200223_0131</span></span><br><span class="line"><span class="xml"> [ ] 0003_delete_exphoto</span></span><br><span class="line"><span class="xml"> [ ] 0004_exphoto</span></span><br><span class="line"><span class="xml"> [ ] 0005_auto_20200304_1652</span></span><br><span class="line"><span class="xml"> parent</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [ ] 0002_auto_20200409_2248</span></span><br></pre></td></tr></table></figure><p>这里parent出现了[ ]，则也应该重置，否则会报错。</p><ol start="4"><li>然后放心大胆地删除<code>migrations</code>文件夹下面，<strong>除了<code>__init__.py</code>文件</strong>，的所有的带有序号的<code>.py</code>文件，包括<code>pycache</code>文件夹！</li><li>执行下面的命令，再次为这个APP 生成 0001_initial.py 之类的文件</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py makemigrations</span></span><br></pre></td></tr></table></figure><ol start="6"><li>最后执行下面的命令，使刚刚生成的<code>0001_initial.py</code>文件记录到<code>django_migrations</code>数据表中，大功告成。</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py migrate --fake-initial</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h1><p><a href="https://blog.csdn.net/zhuoxiuwu/article/details/52167599">Django开发—如何重置migration</a><br /><a href="https://blog.csdn.net/gaifuxi9518/article/details/86591806">Django笔记05：如何悄悄删除migrations下的文件而不引起任何错误</a></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django 中优雅的使用 choice 字段</title>
      <link href="/2020/03/27/django%20%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8%20choice%20%E5%AD%97%E6%AE%B5/"/>
      <url>/2020/03/27/django%20%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8%20choice%20%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="django-中优雅的使用-choice-字段"><a class="markdownIt-Anchor" href="#django-中优雅的使用-choice-字段"></a> django 中优雅的使用 choice 字段</h1><h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><p><code>django</code>中如何比较优雅的对元组进行标记分类。可使用<code>choice</code>字段</p><h1 id="choice字段"><a class="markdownIt-Anchor" href="#choice字段"></a> choice字段</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookTagNum</span>(<span class="params">object</span>):</span></span><br><span class="line">    OTHER = <span class="number">1</span></span><br><span class="line">    SCIENCE = <span class="number">2</span></span><br><span class="line">    SOCIAL_SCIENCES = <span class="number">3</span></span><br><span class="line">    ECONOMIC = <span class="number">4</span></span><br><span class="line">    COMPUTER = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BOOK</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    TAG_NUM_CHOICE = (</span><br><span class="line">        (BookTagNum.OTHER, <span class="string">&#x27;其它&#x27;</span>),</span><br><span class="line">        (BookTagNum.SCIENCE, <span class="string">&#x27;科学类&#x27;</span>),</span><br><span class="line">        (BookTagNum.SOCIAL_SCIENCES, <span class="string">&#x27;社科类&#x27;</span>),</span><br><span class="line">        (BookTagNum.ECONOMIC, <span class="string">&#x27;经济类&#x27;</span>),</span><br><span class="line">        (BookTagNum.COMPUTER, <span class="string">&#x27;计算机类&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    tag = models.IntegerField(choices=TAG_NUM_CHOICE)</span><br></pre></td></tr></table></figure><p>在代码中尽量不要出现固定的硬编码，比如某个判断条件，判断书的分类为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#view.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">book = Book.obejects.filter(tag = BookTagNum.COMPUTER)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django ManyToManyField - 插入 - ORM - admin中显示</title>
      <link href="/2020/03/20/Django%20ManytoMantfield%20%E5%A2%9E%E5%8A%A0%EF%BC%8C%E5%88%A0%E9%99%A4%20admin%E4%B8%AD%E6%98%BE%E7%A4%BA/"/>
      <url>/2020/03/20/Django%20ManytoMantfield%20%E5%A2%9E%E5%8A%A0%EF%BC%8C%E5%88%A0%E9%99%A4%20admin%E4%B8%AD%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="综述"><a class="markdownIt-Anchor" href="#综述"></a> 综述</h1><p><code>Django</code> <code>ManyToManyField</code>的<code>ORM</code>操作和在<code>admin</code>中显示。</p><h1 id="表结构设计"><a class="markdownIt-Anchor" href="#表结构设计"></a> 表结构设计</h1><p>假设一个作者有多本书，一本书也可以有个作者，多对多关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表结构设计</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">   title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">   name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">   books = models.ManyToManyField(Book)</span><br></pre></td></tr></table></figure><h1 id="在admin中显示"><a class="markdownIt-Anchor" href="#在admin中显示"></a> 在admin中显示</h1><p>当数据过多时，<code>django</code>自带的<code>ManyToManyField</code>及其不方便。仅需在<code>admin.py</code>添加如下字段即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">admin.site.register(Author)</span><br></pre></td></tr></table></figure><p>使用<code>filter_horizontal</code>。在作多项选择的操作方便性，及单项选择太多时，会有极好的体验。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改后</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = [<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 列表页展示的字段</span></span><br><span class="line">    filter_horizontal = (<span class="string">&#x27;cards&#x27;</span>,)</span><br><span class="line">admin.site.register(AuthorAdmin)</span><br></pre></td></tr></table></figure><p><strong>若想在admin中显示cards字段。增加如下代码即可</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;relatedbooks&#x27;</span>]  <span class="comment"># 列表页展示的字段    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">relatedbooks</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [book.title <span class="keyword">for</span> book <span class="keyword">in</span> obj.books.all()]</span><br><span class="line">    filter_horizontal = (<span class="string">&#x27;books&#x27;</span>,)</span><br><span class="line">    </span><br><span class="line">admin.site.register(Author,AuthorAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="orm操作"><a class="markdownIt-Anchor" href="#orm操作"></a> ORM操作</h1><h2 id="all-关联的所有的元组"><a class="markdownIt-Anchor" href="#all-关联的所有的元组"></a> all 关联的所有的元组</h2><p>一个作者的所有书。表Author中某一元组关联表Book中的所有元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">   books = author.books.all()’</span><br><span class="line">   <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">       print(books.title)</span><br></pre></td></tr></table></figure><h2 id="add-添加多对多关系"><a class="markdownIt-Anchor" href="#add-添加多对多关系"></a> add 添加多对多关系</h2><p>重复添加同一关系<code>django</code>会自动忽略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">   author.books.add(Book.objects.all())</span><br><span class="line">   author.books.add(Book.objects.get(id=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="remove-多对多关系"><a class="markdownIt-Anchor" href="#remove-多对多关系"></a> remove 多对多关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">author.books..remove(Book.objects.get(id=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="set-替换"><a class="markdownIt-Anchor" href="#set-替换"></a> set 替换</h2><p>直接完整的替换某一多对多关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">author.books.set(Book.objects.get(id=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="clear-清除"><a class="markdownIt-Anchor" href="#clear-清除"></a> clear 清除</h2><p>清除一元组所有多对多关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">author.books.clear()</span><br></pre></td></tr></table></figure><h1 id="一张表自关联"><a class="markdownIt-Anchor" href="#一张表自关联"></a> 一张表自关联</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    friends = models.ManyToManyField(<span class="string">&quot;self&quot;</span>)</span><br></pre></td></tr></table></figure><p>当django处理这个模型时，它会做如此定义：对多对多字段关系被认为是对称的——即，如果我是你的朋友，那么你也是我的朋友。（<s>跟<code>C++</code>一比，我是你的友元，你不是我的友元</s>）</p><p>然而有时候我们不需要这个友好关系，修改<code>symmetrical</code>为<code>False</code>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">symmetrical=Flase</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.git 文件过大 - 减小 .git 文件体积</title>
      <link href="/2020/03/20/git%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7/"/>
      <url>/2020/03/20/git%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="git-文件过大"><a class="markdownIt-Anchor" href="#git-文件过大"></a> .git 文件过大</h1><h1 id="综述"><a class="markdownIt-Anchor" href="#综述"></a> 综述</h1><p>最近发现<code>github</code>上项目<code>.git</code>文件已经达到了2个G，整理了减小<code>.git</code>文件的方法。</p><h2 id="git文件是什么"><a class="markdownIt-Anchor" href="#git文件是什么"></a> .git文件是什么</h2><p>一个管理git仓库的文件夹，这里包含所有git操作所需要的东西</p><h1 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h1><h2 id="简单有效减小体积"><a class="markdownIt-Anchor" href="#简单有效减小体积"></a> 简单有效，减小体积</h2><p>运行 <code>gc</code> ，生成 <code>pack</code> 文件（后面的 <code>--prune=now</code> 表示对之前的所有提交做修剪，有的时候仅仅 <code>gc</code> 一下<code>.git</code> 文件就会小很多）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git gc --prune=now</span><br></pre></td></tr></table></figure><h2 id="克隆时只克隆一层"><a class="markdownIt-Anchor" href="#克隆时只克隆一层"></a> 克隆时只克隆一层</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1</span><br></pre></td></tr></table></figure><h2 id="使用git-lfs管理文件"><a class="markdownIt-Anchor" href="#使用git-lfs管理文件"></a> 使用<code>git-lfs</code>管理文件</h2><p>项目中有大量的图片文件，音频文件，<strong>二进制</strong>文件时，推荐使用第三方扩展插件<code>git-lfs</code>。</p><p>它将你所标记的大文件保存至另外的仓库,而在主仓库仅保留其轻量级指针</p><h3 id="why"><a class="markdownIt-Anchor" href="#why"></a> why?</h3><p>二进制内容比较难压缩, 会导致整个仓库占用的空间飞速增长. 没多久你可能就会发现，10M的文件，100M的<code>.git</code>文件。也就是不能版本比较。</p><h3 id="getting-started"><a class="markdownIt-Anchor" href="#getting-started"></a> Getting Started</h3><p>安装完成后在<code>git bash</code>中运行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git lfs install</span><br></pre></td></tr></table></figure><h3 id="添加你要管理的文件"><a class="markdownIt-Anchor" href="#添加你要管理的文件"></a> 添加你要管理的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git lfs track &quot;*.png&quot;</span><br><span class="line">git lfs track &quot;*.jpg&quot;</span><br><span class="line">git lfs track &quot;*.mp3&quot;</span><br><span class="line">git lfs track &quot;*.pyc&quot;</span><br></pre></td></tr></table></figure><h3 id="添加gitattributes"><a class="markdownIt-Anchor" href="#添加gitattributes"></a> 添加<code>.gitattributes</code></h3><p>该文件保存了文件的追踪记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .gitattributes</span><br></pre></td></tr></table></figure><h3 id="愉快的使用"><a class="markdownIt-Anchor" href="#愉快的使用"></a> 愉快的使用</h3><p>进行完上述处理，后面就和正常<code>git</code>一样了。不会再有多余的步骤，正常<code>add,commit,push,pull,clone</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add file.psd</span><br><span class="line">git commit -m &quot;Add design file&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="官网连接"><a class="markdownIt-Anchor" href="#官网连接"></a> 官网连接</h3><p><a href="https://git-lfs.github.com/">git-lfs官网</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最小生成树】Kruskal - Prim - 堆优化的Prim</title>
      <link href="/2020/03/20/kruskal%20-%20dijskra%20-%20%E5%A0%86%E4%BC%98%E5%8C%96%E7%9A%84%20dijskra/"/>
      <url>/2020/03/20/kruskal%20-%20dijskra%20-%20%E5%A0%86%E4%BC%98%E5%8C%96%E7%9A%84%20dijskra/</url>
      
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#input">input</a></li><li><a href="#output">output</a></li><li><a href="#sample-input">sample input</a></li><li><a href="#sample-output">Sample Output</a></li></ul></p><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>整理了一份最小生成树算法板子</p><h1 id="题目-c-掌握魔法の东东-i"><a class="markdownIt-Anchor" href="#题目-c-掌握魔法の东东-i"></a> 题目 C - 掌握魔法の东东 I</h1><p>东东在老家农村无聊，想种田。农田有$ n$ 块，编号从 1~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>。种田要灌氵<br />众所周知东东是一个魔法师，他可以消耗一定的 MP 在一块田上施展魔法，使得黄河之水天上来。他也可以消耗一定的 MP 在两块田的渠上建立传送门，使得这块田引用那块有水的田的水。 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>3</mn><mi>e</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \le n \le 3e2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathdefault">e</span><span class="mord">2</span><span class="mclose">)</span></span></span></span><br />黄河之水天上来的消耗是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">W_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 是农田编号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><msub><mi>W</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><mi>e</mi><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \le W_i \le 1e5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">5</span><span class="mclose">)</span></span></span></span><br />建立传送门的消耗是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>是农田编号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>≤</mo><mn>1</mn><mi>e</mi><mn>5</mn><mo separator="true">,</mo><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>P</mi><mrow><mi>j</mi><mi>i</mi></mrow></msub><mo separator="true">,</mo><msub><mi>P</mi><mrow><mi>i</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \le P_{ij}  \le 1e5, P_{ij} = P_{ji}, P_{ii} =0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span><br />东东为所有的田灌氵的最小消耗</p><h2 id="input"><a class="markdownIt-Anchor" href="#input"></a> input</h2><p>第1行：一个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span><br />第2行到第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>行：数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>行到第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>行：矩阵即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>矩阵</p><h2 id="output"><a class="markdownIt-Anchor" href="#output"></a> output</h2><p>东东最小消耗的MP值</p><h2 id="sample-input"><a class="markdownIt-Anchor" href="#sample-input"></a> sample input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">0 2 2 2</span><br><span class="line">2 0 3 3</span><br><span class="line">2 3 0 4</span><br><span class="line">2 3 4 0</span><br></pre></td></tr></table></figure><h2 id="sample-output"><a class="markdownIt-Anchor" href="#sample-output"></a> Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h1 id="kruskal"><a class="markdownIt-Anchor" href="#kruskal"></a> Kruskal</h1><p>复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mlogm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> par[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &lt; a.w; &#125;</span><br><span class="line">&#125; v[MAXN * MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> par[x] == x ? x : par[x] = find(par[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[cnt].x = <span class="number">0</span>;</span><br><span class="line">        v[cnt].y = i;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[cnt].w;</span><br><span class="line">        ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = get_num();</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">            v[cnt].x = i;</span><br><span class="line">            v[cnt].y = j;</span><br><span class="line">            v[cnt].w = w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v + <span class="number">1</span>, v + cnt);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) par[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (find(v[i].x) != find(v[i].y)) &#123;</span><br><span class="line">            ans += v[i].w;</span><br><span class="line">            par[find(v[i].x)] = find(v[i].y);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="primdijkstra"><a class="markdownIt-Anchor" href="#primdijkstra"></a> Prim(Dijkstra)</h1><p>复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> v[MAXN][MAXN], vis[MAXN], d[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = get_num();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = get_num();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = get_num();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1e9</span>, k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i] &amp;&amp; d[i] &lt; sum) &#123;</span><br><span class="line">                sum = d[i];</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += d[k];</span><br><span class="line">        vis[k] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            d[i] = min(d[i], v[k][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆优化的prim"><a class="markdownIt-Anchor" href="#堆优化的prim"></a> 堆优化的Prim</h1><p>复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((m+n)logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，若采用邻接矩阵存图时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> v[MAXN][MAXN], vis[MAXN], d[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re &amp;a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &gt; a.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;re&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = get_num();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = get_num();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = get_num();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    Q.push(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        re h = Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[h.d]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[h.d] = <span class="number">1</span>;</span><br><span class="line">        ans += h.w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[i] &gt; v[h.d][i]) &#123;</span><br><span class="line">                d[i] = v[h.d][i];</span><br><span class="line">                Q.push(&#123;i, d[i]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间效率对比"><a class="markdownIt-Anchor" href="#时间效率对比"></a> 时间效率对比</h1><p>从上至下依次为堆优化的Prim，Prim，Kruskal：<br /><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200813192903.png" alt="从上至下依次为堆优化的Prim，Prim，Kruskal" /></p>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 程序设计思维时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 访问文件夹下所有文件、图片</title>
      <link href="/2020/03/16/python%20%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E3%80%81%E5%9B%BE%E7%89%87/"/>
      <url>/2020/03/16/python%20%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E3%80%81%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><p>如何使用<code>python</code>访文件夹下的所有文件？</p><h1 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h1><ul><li>使用<code>os.listdir(path)</code>装载文件路径</li><li>使用<code>os.path.join()</code>可拼接获得完整路径，对于<code>windows</code>，需要补全文件夹名后面的<code>/</code>，否则<code>python</code>会错误的添加<code>\</code>（如：<code>&quot;./test\a.png”</code>。</li><li>使用open()打开目标文件</li></ul><h2 id="图片类型"><a class="markdownIt-Anchor" href="#图片类型"></a> 图片类型</h2><p>对于图片类型，以<code>rb</code>(只读二进制)打开，避免对图片错误写。<s>一开始以<code>w</code>一直图片格式损坏，鼓捣半天才发现文件被写没了。</s></p><h1 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h1><pre class="highlight"><code class="python">path = <span class="hljs-string">"./test/"</span>files = os.listdir(path)<span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:    f = open(os.path.join(path, filename),<span class="hljs-string">'rb'</span>)    print(filename)    print(os.path.join(path, filename))</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ set 用法小结</title>
      <link href="/2020/03/11/C-set-%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/03/11/C-set-%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h3><p>无意间翻到了17年11月准备NOIP时整理的set用法，现把它放到csdn上来</p><hr /><h2 id="set-小结"><a class="markdownIt-Anchor" href="#set-小结"></a> <code>&lt;set&gt;</code> 小结</h2><p><code>set</code>的英文意思是“集合”， 集合都不陌生吧，集合的特点有唯一性，即：每一个元素只有一个，所以<code>set</code>可以用来“去重”操作，<code>set</code>还有默认的排序。</p><ol><li>头文件——<code>&lt;set&gt;</code></li><li>定义——<code>set&lt;int&gt;Q</code></li><li>输入（插入）——<code>insert(x)</code></li><li>有序输出:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(it = Q.begin(); it != Q.end(); it++)</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>删除制定元素——<code>erase(x)</code></li><li>清空——<code>clear()</code></li><li>判空——<code>empty()</code></li><li>大小——<code>size()</code></li><li>二分查找——<code>Q.lower_bound(x)</code></li></ol><h2 id="set-的-lower_bound-upper_bound"><a class="markdownIt-Anchor" href="#set-的-lower_bound-upper_bound"></a> set 的 <code>lower_bound()</code> <code>upper_bound</code></h2><p>内部自带 <code>lower_bound()</code> <code>upper_bound</code>（这俩返回的是迭代器）</p><p><code>lower_bound(key_value)</code> ，返回第一个大于等于<code>key_value</code>的定位器</p><p><code>upper_bound(key_value)</code>，返回最后一个大于等于<code>key_value</code>的定位器</p><h3 id="erase的三种用法"><a class="markdownIt-Anchor" href="#erase的三种用法"></a> <code>erase</code>的三种用法</h3><p><code>erase(iterator)</code>  ,删除定位器<code>iterator</code>指向的值</p><p><code>erase(first,second)</code>,删除定位器<code>first</code>和<code>second</code>之间的值</p><p><code>erase(key_value)</code>,删除键值<code>key_value</code>的值</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = get_num();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        Q.insert(get_num());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator p_s;</span><br><span class="line">    <span class="keyword">for</span> (p_s = Q.begin(); p_s != Q.end(); p_s++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *p_s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    p_s = Q.lower_bound(<span class="number">1</span>);</span><br><span class="line">    Q.erase(p_s);</span><br><span class="line">    <span class="keyword">for</span> (p_s = Q.begin(); p_s != Q.end(); p_s++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *p_s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - new - 动态数组 - 初始化</title>
      <link href="/2020/03/01/C-new-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84-%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2020/03/01/C-new-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84-%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的动态初始化"><a class="markdownIt-Anchor" href="#数组的动态初始化"></a> 数组的动态初始化</h1><p>在代码的时候看到了new初始化的一些问题，查阅了相关文档总结如下。可直接阅读结论部分，文档内内容在下面。</p><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">// 每个元素都没有初始化</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>] (); <span class="comment">// 每个元素初始化为0</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">7</span>); <span class="comment">// 元素初始化为8</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>(); <span class="comment">// 元素初始化为0</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>; <span class="comment">// 元素没有初始化</span></span><br><span class="line"><span class="built_in">string</span> *p = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">10</span>]; <span class="comment">// 每个元素调用默认构造函数初始化</span></span><br><span class="line"><span class="built_in">string</span> *p = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">10</span>](); <span class="comment">// 每个元素调用默认构造函数初始化</span></span><br></pre></td></tr></table></figure><p>为什么没有<code>int *p = new int[10](7)</code>，因为标准不支持，可见规则2。</p><p><strong>动态数组初始化：</strong></p><ol><li><p>动态数组只能初始化为元素类型的默认值，而不能像数组变量一样，用初始化列表为数组元素提供各不相同的初值。</p></li><li><p>对于内置数据类型元素的数组，必须使用()来显示指定程序执行初始化操作，否则程序不执行初始化操作：</p></li><li><p>类类型元素的数组，则无论是否使用（），都会自动调用其默认构造函数来初始化：</p></li></ol><h2 id="规则"><a class="markdownIt-Anchor" href="#规则"></a> 规则</h2><p>new 表达式所创建的对象按照下列规则初始化：</p><ol><li>对于非数组的类型，在所得内存区域中构造单个对象。<ul><li>若无初始化器，则对象被默认初始化。</li><li>若初始化器是带括号的实参列表，则对象被直接初始化。</li><li>若 初始化器 是花括号包围的实参列表，则对象被列表初始化。(C++11 起)</li></ul></li><li>若 类型 是数组类型，则初始化一个数组的对象。<ul><li>若无初始化器，则每个元素被默认初始化。</li><li>若初始化器是一对空括号，则每个元素被值初始化。</li><li>若初始化器是花括号包围的实参列表，则数组被聚合初始化。(C++11 起)</li><li>若初始化器是带括号的实参列表，则数组被聚合初始化。</li></ul></li></ol><h3 id="默认初始化"><a class="markdownIt-Anchor" href="#默认初始化"></a> 默认初始化</h3><ul><li>若 <code>T</code> 是<code>no- POD</code>类类型（<code>int</code>, <code>char</code>, <code>wchar_t</code>, <code>bool</code>, <code>float</code>, <code>double</code> 是POD类型 ）。调用所选的构造函数，以提供新对象的初始值；</li><li>若 <code>T</code> 是数组类型，则每个数组元素都被默认初始化；</li><li>否则，不做任何事：具有自动存储期的对象（及其子对象）被初始化为不确定值。</li></ul><h3 id="直接初始化"><a class="markdownIt-Anchor" href="#直接初始化"></a> 直接初始化</h3><p>可以理解为复制初始化。区别是：直接初始化考虑所有构造函数和所有用户定义转换函数。</p><h3 id="值初始化"><a class="markdownIt-Anchor" href="#值初始化"></a> 值初始化</h3><p><strong><code>C++11</code>前：</strong></p><ol><li><p>若 <code>T</code> 是有至少一个用户提供的任意种类的构造函数的类类型，则调用默认构造函数；</p></li><li><p>若 <code>T</code> 是没有任何用户提供的构造函数的非联合体类类型，则值初始化 T 的每个非静态数据成员与基类组分；</p></li></ol><p><strong><code>C++11</code>后：</strong></p><ol><li><p>若 <code>T</code> 是没有默认构造函数，或拥有用户提供的或被删除的默认构造函数的类类型，则默认初始化对象；</p></li><li><p>若 <code>T</code> 是拥有默认构造函数的类类型，而默认构造函数既非用户提供亦未被删除（即它可以是拥有隐式定义的或默认化的默认构造函数的类），则零初始化对象，然后若其拥有非平凡的默认构造函数，则默认初始化它；</p></li></ol><hr /><ol start="3"><li><p>若 <code>T</code> 是数组类型，则值初始化数组的每个元素；</p></li><li><p>否则，零初始化对象。</p></li></ol><h4 id="pod"><a class="markdownIt-Anchor" href="#pod"></a> POD</h4><p>摘自某百科：</p><p>A PDS type in C++, or Plain Old C++ Object, is defined as either a scalar type or a PDS class. A PDS class has no user-defined copy assignment operator, no user-defined destructor, and no non-static data members that are not themselves PDS. Moreover, a PDS class must be an aggregate, meaning it has no user-declared constructors, no private nor protected non-static data, no virtual base classes and no virtual functions. The standard includes statements about how PDS must behave in C++. The type_traits library in the C++ Standard Library provides a template named is_pod that can be used to determine whether a given type is a POD. In C++20 the notion of “plain old data” (POD) and by that is_pod is deprecated and replaced with the concept of “trivial” and “standard-layout” types.</p><p>In some contexts, C++ allows only PDS types to be used. For example, a union in C++98 cannot contain a class that has virtual functions or nontrivial constructors or destructors. This restriction is imposed because the compiler cannot determine which constructor or destructor should be called for a union. PDS types can also be used for interfacing with C, which supports only PDS.</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS - 反汇编 - 拆炸弹 - bomb</title>
      <link href="/2020/02/23/MIPS-%E5%8F%8D%E6%B1%87%E7%BC%96-%E6%8B%86%E7%82%B8%E5%BC%B9-bomb/"/>
      <url>/2020/02/23/MIPS-%E5%8F%8D%E6%B1%87%E7%BC%96-%E6%8B%86%E7%82%B8%E5%BC%B9-bomb/</url>
      
        <content type="html"><![CDATA[<h1 id="mips-反汇编-拆炸弹-bomb"><a class="markdownIt-Anchor" href="#mips-反汇编-拆炸弹-bomb"></a> MIPS - 反汇编 - 拆炸弹 - bomb</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>整理文档发现了之前的实验报告，鉴于从17级开始才开始使用MIPS实验环境吗，取实验报告精华，整理主要思路如下。该博客叙述风格参考了窦优秀学长的博客。<br />该博客旨在帮助入门分析，不对整个过程详细介绍。前三个炸弹较为详细。</p><h2 id="作者信息"><a class="markdownIt-Anchor" href="#作者信息"></a> 作者信息</h2><p>2018级山东大学计算机LL</p><h2 id="gdb"><a class="markdownIt-Anchor" href="#gdb"></a> GDB</h2><ul><li>设置、查看、删除断点：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.b * 0x233666  </span><br><span class="line">2.info b  </span><br><span class="line">3.delete 1  </span><br></pre></td></tr></table></figure><ul><li>查看寄存器、变量中的值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.x <span class="variable">$ra</span>  <span class="comment"># 与p *$ra 类似  </span></span><br><span class="line">2.p <span class="variable">$ra</span>  <span class="comment">#打印参数  </span></span><br></pre></td></tr></table></figure><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><h3 id="先给出一些常用指令-寄存器和函数的说明"><a class="markdownIt-Anchor" href="#先给出一些常用指令-寄存器和函数的说明"></a> 先给出一些常用指令、寄存器和函数的说明：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>BEQZ RS, OFF18 IF RS = <span class="number">0</span>, PC = OFF18  </span><br><span class="line"><span class="number">2.</span>（如果寄存器中值为<span class="number">0</span>，PC指针赋值为立即数）  </span><br><span class="line"><span class="number">3.</span>BEQ RS, RT, OFF18 IF RS = RT, PC = OFF18±  </span><br><span class="line"><span class="number">4.</span>SLTI RD, RS, CONST16 RD = (RS± &lt; CONST16±) ? <span class="number">1</span> : <span class="number">0</span>  </span><br></pre></td></tr></table></figure><h3 id="炸弹一"><a class="markdownIt-Anchor" href="#炸弹一"></a> 炸弹一</h3><p>虽然&lt;phase_1&gt;的拆除思路在指导书中已大致给出，下面还是对该炸弹进行简要分析。结合对MIPS寄存器的了解（详细分析见结论分析与体会），可知$a0 and $a1寄存器通常用来函数参数的传递。在&lt;phase_1&gt;中调用了函数&lt;strings_not_equal&gt;，并在调用前对$a0 and $a1寄存器进行修改。分析汇编带代码：<br />结束&lt;strings_not_equal&gt;后，判断v0值是否为0，若为0正常结束函数，若不为0执行&lt;explode_bomb&gt;，即炸弹爆炸。<br />因此，该炸弹即读入字符串和一预设字符串相同即可拆除。通过GDB工具在400d8c地址处查看$a1寄存器指向地址中的值 x /s $a1，可知该字符串为Let’s begin now！。读入时输入该字符串，即可正常拆除炸弹。</p><h3 id="炸弹二"><a class="markdownIt-Anchor" href="#炸弹二"></a> 炸弹二</h3><p>进入第二个炸弹时调用了&lt;read_six_numbers&gt;函数，可以知道该函数读入的为6个数字。<br />循环结束后执行下述指令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">400</span>d8c: <span class="number">0</span>c10073e    jal  <span class="number">401</span>cf8 &lt;strings_not_equal&gt;  </span><br><span class="line"><span class="number">2.</span><span class="number">400</span>d90: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">3.</span><span class="number">400</span>d94: <span class="number">10400003</span>    beqz    v0,<span class="number">400</span>da4 &lt;phase_1+<span class="number">0x38</span>&gt;  </span><br><span class="line"><span class="number">4.</span><span class="number">400</span>d98: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">5.</span><span class="number">400</span>d9c: <span class="number">0</span>c10087c    jal <span class="number">4021f</span>0 &lt;explode_bomb&gt;  </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223214742369.png" alt="在这里插入图片描述" /></p><p>分析可知循环会进行5次。<br />在每层循环中均有一个&lt;explode_bomb&gt; ，即会进行5次数的判断。且每次判断$a0和$v0寄存器中的值是否相同。</p><h3 id="炸弹三"><a class="markdownIt-Anchor" href="#炸弹三"></a> 炸弹三</h3><p>进入函数后，会先执行如下汇编语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">400f</span>2c: <span class="number">8f</span>dc0018    lw  gp,<span class="number">24</span>(s8)      <span class="meta"># gp = M[s8+24]  </span></span><br><span class="line"><span class="number">2.</span><span class="number">400f</span>30: <span class="number">28420003</span>    slti    v0,v0,<span class="number">3</span>      # v0 = (v0&lt;<span class="number">3</span>)?<span class="number">1</span>:<span class="number">0</span>   </span><br><span class="line"><span class="number">3.</span><span class="number">400f</span>34: <span class="number">10400004</span>    beqz    v0,<span class="number">400f</span>48 &lt;phase_3+<span class="number">0x74</span>&gt;   </span><br></pre></td></tr></table></figure><p>其为判断函数读入的参数是否大于三个（实际只需要前三个）<br />$v0的值为44(s8)，猜测其为读入的一个参数，且不能比8小。之后会根据这个值跳转到一个地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">400f</span>5c: <span class="number">00021880</span>    sll v1,v0,<span class="number">0x2</span>  </span><br><span class="line"><span class="number">2.</span><span class="number">400f</span>60: <span class="number">3</span>c020040    lui v0,<span class="number">0x40</span>  </span><br><span class="line"><span class="number">3.</span><span class="number">400f</span>64: <span class="number">2442278</span>c    addiu   v0,v0,<span class="number">10124</span>  </span><br><span class="line"><span class="number">4.</span><span class="number">400f</span>68: <span class="number">00621021</span>    addu    v0,v1,v0  </span><br><span class="line"><span class="number">5.</span><span class="number">400f</span>6c: <span class="number">8</span>c420000    lw  v0,<span class="number">0</span>(v0)  </span><br><span class="line"><span class="number">6.</span><span class="number">400f</span>70: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">7.</span><span class="number">400f</span>74: <span class="number">00400008</span>    jr  v0  </span><br></pre></td></tr></table></figure><p>分析第一个数和第三个数应为数字，第二个数为字符。（233,将‘2’赋值给第二个参数，33赋给第3个参数）。的第三个参数判断与为学号最后一位相乘判断是不是与当前选参数相同。 <code>777</code><br />如学号最后一位为7，应该为<code>0 q 111</code></p><h3 id="炸弹四"><a class="markdownIt-Anchor" href="#炸弹四"></a> 炸弹四</h3><p>与炸弹3类似，开始时程序会先判断读入的是否为一个数字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">401310</span>: <span class="number">00401821</span>    move    v1,v0  </span><br><span class="line"><span class="number">2.</span><span class="number">401314</span>: <span class="number">24020001</span>    li  v0,<span class="number">1</span>  </span><br><span class="line"><span class="number">3.</span><span class="number">401318</span>: <span class="number">14620005</span>    bne v1,v0,<span class="number">401330</span> &lt;phase_4+<span class="number">0x74</span>&gt;  </span><br></pre></td></tr></table></figure><p>这里如果输入的第一个数是数字则v1为1，若为字符则v1为0。之后程序会判但学号最后一位是奇数还是偶数。<br /><s>这里某Y大佬直接看出来是斐波那契，问他为什么，因为递归 -1 -2 ，直接秒出，绝了。</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">40125</span>c: <span class="number">8f</span>c20028    lw  v0,<span class="number">40</span>(s8)  </span><br><span class="line"><span class="number">2.</span><span class="number">401260</span>: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">3.</span><span class="number">401264</span>: <span class="number">2442f</span>fff    addiu   v0,v0,<span class="number">-1</span>  </span><br><span class="line"><span class="number">4.</span><span class="number">401268</span>: <span class="number">00402021</span>    move    a0,v0  </span><br><span class="line"><span class="number">5.</span><span class="number">40126</span>c: <span class="number">0</span>c10048c    jal <span class="number">401230</span> &lt;func4&gt;  </span><br><span class="line"><span class="number">6.</span><span class="number">401270</span>: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">7.</span><span class="number">401274</span>: <span class="number">00408021</span>    move    s0,v0  </span><br><span class="line"><span class="number">8.</span><span class="number">401278</span>: <span class="number">8f</span>c20028    lw  v0,<span class="number">40</span>(s8)  </span><br><span class="line"><span class="number">9.</span><span class="number">40127</span>c: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">10.</span><span class="number">401280</span>: <span class="number">2442f</span>ffe    addiu   v0,v0,<span class="number">-2</span>  </span><br><span class="line"><span class="number">11.</span><span class="number">401284</span>: <span class="number">00402021</span>    move    a0,v0  </span><br><span class="line"><span class="number">12.</span><span class="number">401288</span>: <span class="number">0</span>c10048c    jal <span class="number">401230</span> &lt;func4&gt;  </span><br><span class="line"><span class="number">13.</span><span class="number">40128</span>c: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">14.</span><span class="number">401290</span>: <span class="number">02021021</span>    addu    v0,s0,v0  </span><br></pre></td></tr></table></figure><p>会递归的调用fun4($v0 – 1)和 fun4($v0-2)。并将这两个的返回结果相加存储在$v0中。其显然为斐波那契的调用方式。读入数位i是对应的数字是f[i+1]（func4索引从零开始，斐波那契索引从1开始）。<br />奇数情况下会判断函数返回结果是否为8，偶数判断是否为13。则学号末尾为奇数应该输入5，为偶数应该输入6。</p><h3 id="炸弹五"><a class="markdownIt-Anchor" href="#炸弹五"></a> 炸弹五</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221324966.png" alt="在这里插入图片描述" /></p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/2020022322132950.png" alt="在这里插入图片描述" /></p><p>目标值位giants，根据对应关系可构造字符串位opekma。</p><h3 id="炸弹六"><a class="markdownIt-Anchor" href="#炸弹六"></a> 炸弹六</h3><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221357366.png" alt="在这里插入图片描述" /></p><p>放张图吧：</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221405687.png" alt="在这里插入图片描述" /></p><h3 id="隐藏炸弹"><a class="markdownIt-Anchor" href="#隐藏炸弹"></a> 隐藏炸弹</h3><h4 id="入口"><a class="markdownIt-Anchor" href="#入口"></a> 入口</h4><p>通过查看反汇编代码可以发现含有一个&lt;secrect_phase&gt;，进一步查看反汇编代码可以发现其进入的入口在&lt;phase_defused&gt;。而每一个炸弹调用完都会在主函数调用一次&lt;phase_defused&gt;。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">402288</span>: <span class="number">24020006</span>    li  v0,<span class="number">6</span>  </span><br><span class="line"><span class="number">2.</span><span class="number">40228</span>c: <span class="number">14620039</span>    bne v1,v0,<span class="number">402374</span> &lt;phase_defused+<span class="number">0x110</span>&gt;  </span><br></pre></td></tr></table></figure><p>查看代码可知，&lt;phase_defused&gt;仅在最后一个炸弹结束后才会往下进行判断，1-5炸弹中不会进入隐藏炸弹。</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221540211.png" alt="phase_defused" /></p><p>可以看到，目标字符串为austinpowers，即第四个炸弹出输入 5 austinpowers 即可进入隐藏炸弹。<br />也是放张图吧：</p><p><img src= "/img/loading.gif" data-lazy-src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221556480.png" alt="二叉树啊" /></p><p>答案:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一组</span></span><br><span class="line"><span class="number">20180000777</span>  </span><br><span class="line">Let<span class="string">&#x27;s begin now!  </span></span><br><span class="line"><span class="string">1 7 49 343 0 0  </span></span><br><span class="line"><span class="string">0 q 111  </span></span><br><span class="line"><span class="string">5 austinpowers  </span></span><br><span class="line"><span class="string">opekma  </span></span><br><span class="line"><span class="string">4 2 6 3 1 5  </span></span><br><span class="line"><span class="string">1001  </span></span><br><span class="line"><span class="string"># 第二组</span></span><br><span class="line"><span class="string">123456111132</span></span><br><span class="line"><span class="string">Let’s begin now!</span></span><br><span class="line"><span class="string">1 2 6 6 6 6</span></span><br><span class="line"><span class="string">4 o 114</span></span><br><span class="line"><span class="string">5 austinpowers</span></span><br><span class="line"><span class="string">opekma</span></span><br><span class="line"><span class="string">5 1 3 6 2 4</span></span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h2><h3 id="mips常用寄存器"><a class="markdownIt-Anchor" href="#mips常用寄存器"></a> MIPS常用寄存器</h3><p>($v0-$v1)用于子程序的非浮点结果或返回值。<br />($a0-$a3)用来传递前四个参数给子程序，不够的用堆栈。$a0-$a3和$v0-$v1以及$ra一起来支持子程序／过程调用，分别用以传递参数，返回结果和存放返回地址。当需要使用更多的寄存器时，就需要堆栈(stack)。<br />($gp)为了简化静态数据的访问，MIPS软件保留了一个寄存器：全局指针gp，全局指针只想静态数据区中的运行时决定的地址。<br />($sp)指向当前正在操作的堆栈顶部。<br />($ra)在函数调用过程中，保持子函数返回后的指令地址。<br />($s8)也称为($fp)。不同编译器对其解释不同，在龙芯里更像传递给子函数的帧指针，这里不做讨论。</p><h3 id="实验环境搭建"><a class="markdownIt-Anchor" href="#实验环境搭建"></a> 实验环境搭建</h3><p>为了更好的的完成实验，我在自己电脑上搭建了MIPS指令集环境。可以采用两种策略，一种是qemu-user，一种是qemu-system。如果说qemu-system是模拟mips的操作系统，qemu-user更像是模拟mips的指令集。为了更快的响应时间，我选择了qemu-user。<br />并且采用了Ubuntu18.04操作系统。GDB采用了gdb-multiarch。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIPS </tag>
            
            <tag> 拆炸弹 </tag>
            
            <tag> 反汇编 </tag>
            
            <tag> 计算机系统原理 </tag>
            
            <tag> GDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu LTS 18.04 下 conda tmux zsh等配置</title>
      <link href="/2020/02/23/Ubuntu-LTS-18-04-%E4%B8%8B-conda-tmux-zsh%E7%AD%89%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/23/Ubuntu-LTS-18-04-%E4%B8%8B-conda-tmux-zsh%E7%AD%89%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一个新的ubuntu-lts-1804-conda-tmux-zsh等配置"><a class="markdownIt-Anchor" href="#一个新的ubuntu-lts-1804-conda-tmux-zsh等配置"></a> 一个新的Ubuntu LTS 18.04 conda tmux zsh等配置</h1><p>最近阿里云给出免费6个月2H4G服务器活动，领了一个并简单配置了一下。<br />相较于apt-get更推荐apt，它集合了apt-get，更新，更便捷。</p><h2 id="用户"><a class="markdownIt-Anchor" href="#用户"></a> 用户</h2><h3 id="创建新用户"><a class="markdownIt-Anchor" href="#创建新用户"></a> 创建新用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser xxx #创建用户</span><br><span class="line">sudo userdel xxx #删除用户</span><br></pre></td></tr></table></figure><h3 id="添加管理员权限"><a class="markdownIt-Anchor" href="#添加管理员权限"></a> 添加管理员权限</h3><p>首先：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;root ALL=(ALL) ALL&quot; 在起下面添加 &quot;xxx ALL=(ALL) ALL&quot; (这里的 xxx 是你的用户名)，然后保存退出。</span><br></pre></td></tr></table></figure><h3 id="修改主机名"><a class="markdownIt-Anchor" href="#修改主机名"></a> 修改主机名</h3><ul><li>首先修改<code>/etc/cloud/cloud.cfg</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/cloud/cloud.cfg</span><br><span class="line"><span class="meta">#</span><span class="bash">找到preserve_hostname: <span class="literal">false</span>修改为preserve_hostname: <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改主机名</span></span><br><span class="line">sudo vim /etc/hostname</span><br><span class="line"><span class="meta">#</span><span class="bash">然后改为需要的主机名后存盘退出</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">映射主机名（可选，因为域名只对应IP，和主机无关）</span></span><br><span class="line">sudo vim /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash">192.168.1.xxx 主机名</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><ul><li><code>sudo reboot</code></li></ul><h2 id="系统"><a class="markdownIt-Anchor" href="#系统"></a> 系统</h2><h3 id="软件升级"><a class="markdownIt-Anchor" href="#软件升级"></a> 软件升级</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update: # 升级安装包相关的命令,刷新可安装的软件列表(但是不做任何实际的安装动作)</span><br><span class="line">sudo apt upgrade: # 进行安装包的更新(软件版本的升级)</span><br><span class="line">sudo apt dist-upgrade: # 除了拥有upgrade的全部功能外，dist-upgrade会比upgrade更智能地处理需要更新的软件包的依赖关系。</span><br><span class="line">sudo do-release-upgrade: # 进行系统版本的升级(Ubuntu版本的升级)，Ubuntu官方推荐的系统升级方式,若加参数-d还可以升级到开发版本,但会不稳定</span><br></pre></td></tr></table></figure><h2 id="zsh"><a class="markdownIt-Anchor" href="#zsh"></a> zsh</h2><h3 id="安装并替换"><a class="markdownIt-Anchor" href="#安装并替换"></a> 安装并替换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置成默认shell</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="主题"><a class="markdownIt-Anchor" href="#主题"></a> 主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.zshrc</span><br><span class="line"># 我常用 &quot;ys&quot;</span><br></pre></td></tr></table></figure><h3 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins</span><br><span class="line"><span class="meta">#</span><span class="bash"> 高亮插件</span></span><br><span class="line">git clone git://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 代码提示</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line">sudo vim ~/.zshrc</span><br><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br><span class="line"><span class="meta">#</span><span class="bash"> save</span></span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置conda</span></span><br><span class="line">export PATH=~/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><h2 id="conda"><a class="markdownIt-Anchor" href="#conda"></a> conda</h2><p>使用当前用户安装即可, 按情况换源， 实测阿里云不换源体验很好</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华镜像站</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">升级conda(升级Anaconda前需要先升级conda)：conda update conda </span><br><span class="line">升级anaconda：conda update anaconda </span><br><span class="line">升级spyder：conda update spyder</span><br><span class="line">更新所有包：conda update --all</span><br><span class="line">安装包：conda install package</span><br><span class="line">更新包：conda update package</span><br></pre></td></tr></table></figure><h2 id="tmux"><a class="markdownIt-Anchor" href="#tmux"></a> tmux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tmux</span><br><span class="line">tmux new -s session_name</span><br><span class="line">tmux attach -t session_name</span><br></pre></td></tr></table></figure><h2 id="解决git每次push都需要输入用户名和密码"><a class="markdownIt-Anchor" href="#解决git每次push都需要输入用户名和密码"></a> 解决git每次push都需要输入用户名和密码</h2><p>再用户根目录下输入即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="配置免密登入"><a class="markdownIt-Anchor" href="#配置免密登入"></a> 配置免密登入</h2><ul><li>在win系统下找到用户目录的<code>.ssh</code>文件夹，将<code>id_rsa.pub</code>复制一份命名为<code>authorized_keys</code></li><li>将<code>authorized_keys</code>发送到ubuntu 根目录下的 <code>.ssh</code>中，若没有，则创建。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmux </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> conda </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下tmux操作指令整理</title>
      <link href="/2020/02/12/Linux%E4%B8%8Btmux%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2020/02/12/Linux%E4%B8%8Btmux%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="tmux"><a class="markdownIt-Anchor" href="#tmux"></a> tmux</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s session_name # 创建名为 session_name 的 tmux session</span><br><span class="line">tmux attach -t session_name # 重新回到叫做 session_name 的 tmux session</span><br><span class="line">tmux switch -t session_name #  切换到叫做 session_name 的 tmux session</span><br><span class="line">tmux list-sessions / tmux ls # 列出现有的所有 session</span><br><span class="line">tmux detach # 离开当前开启的 session</span><br><span class="line">tmux kill-server # 关闭所有 session</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ctrl + b</span><br><span class="line">? 列出所有快捷键；按q返回</span><br><span class="line">d 脱离当前会话,可暂时返回Shell界面</span><br><span class="line">s 选择并切换会话；在同时开启了多个会话时使用</span><br><span class="line">D 选择要脱离的会话；在同时开启了多个会话时使用</span><br><span class="line">: 进入命令行模式；此时可输入支持的命令，例如 kill-server 关闭所有tmux会话</span><br><span class="line">[ 复制模式，光标移动到复制内容位置，空格键开始，方向键选择复制，回车确认，q/Esc退出</span><br><span class="line">] 进入粘贴模式，粘贴之前复制的内容，按q/Esc退出</span><br><span class="line">~ 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</span><br><span class="line">t 显示当前的时间</span><br><span class="line">ctrl + z 挂起当前会话</span><br></pre></td></tr></table></figure><p>参考下面的文章<br /><a href="%60https://blog.csdn.net/lell3538/article/details/82150733%60/">tmux使用手记</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmux </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【板子】数据结构 &amp;&amp; 图论 &amp;&amp; 数论</title>
      <link href="/2017/11/09/%E6%9D%BF%E5%AD%90/"/>
      <url>/2017/11/09/%E6%9D%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h1><blockquote><p>2020-06-27 加入Kosaraju</p><p>2020-06-26 加入前向星、二分、修复割顶</p><p>2020-06-25 加入Trie树、O2优化、万能头部、二进制拆分、拓扑排序</p><p>2020-06-25 加入最小生成树、KMP、Dijkstra。更新矩阵快速幂</p><p>2020-06-25 更新代码片段，调整文档结构</p><p>2020-06-25 重新排版</p><p>2017-11-09 NOIP第一次整理上传</p></blockquote><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>自用板子，经测试代码均正确，可以放心食用，源自于17年准备NOIP（当时还不会md😭）。大学程序设计课对板子进行完善。</p><h1 id="代码片段"><a class="markdownIt-Anchor" href="#代码片段"></a> 代码片段</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2) </span></span><br><span class="line"><span class="comment">// #include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_num</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        num = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c = getchar())) num = num * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> num * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// cout.tie(NULL);</span></span><br><span class="line">    freopen(<span class="string">&quot;a.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;a.out&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h1><h2 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">tr[p].w=tr[p&lt;&lt;<span class="number">1</span>].w+tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tr[p].lazy) <span class="keyword">return</span> ;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].w+=tr[p].lazy*(tr[p&lt;&lt;<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].lazy+=tr[p].lazy;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w+=tr[p].lazy*(tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy+=tr[p].lazy;</span><br><span class="line">tr[p].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">tr[p].l=l;tr[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[p].w=get_num();</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(p&lt;&lt;<span class="number">1</span>,l,mid);build(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l==l&amp;&amp;tr[p].r==r)&#123;</span><br><span class="line">tr[p].w+=(r-l+<span class="number">1</span>)*k;</span><br><span class="line">tr[p].lazy+=k;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">push_down(p);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[p].r+tr[p].l)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) add(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) add(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">add(p&lt;&lt;<span class="number">1</span>,l,mid,k);add(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br><span class="line">push_up(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l==l&amp;&amp;tr[p].r==r)&#123;</span><br><span class="line"><span class="keyword">return</span> tr[p].w;</span><br><span class="line">&#125;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line">push_down(p);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[p].r+tr[p].l)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) ans=query(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) ans=query(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans=query(p&lt;&lt;<span class="number">1</span>,l,mid)+query(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line">push_up(p);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;n=get_num();m=get_num();</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> c,x,y;LL k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">c=get_num();x=get_num();y=get_num();</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">k=get_num();</span><br><span class="line">add(<span class="number">1</span>,x,y,k);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query(<span class="number">1</span>,x,y)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树链剖分"><a class="markdownIt-Anchor" href="#树链剖分"></a> 树链剖分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">tr[p].w=tr[p&lt;&lt;<span class="number">1</span>].w+tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tr[p].lazy) <span class="keyword">return</span> ;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].w+=tr[p].lazy*(tr[p&lt;&lt;<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].lazy+=tr[p].lazy;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w+=tr[p].lazy*(tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy+=tr[p].lazy;</span><br><span class="line">tr[p].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">tr[p].l=l;tr[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[p].w=w[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(p&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l==l&amp;&amp;tr[p].r==r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].w+=(r-l+<span class="number">1</span>)*k;</span><br><span class="line">tr[p].lazy+=k;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">push_down(p);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) add(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) add(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">add(p&lt;&lt;<span class="number">1</span>,l,mid,k);add(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br><span class="line">push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l==l&amp;&amp;tr[p].r==r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tr[p].w;</span><br><span class="line">&#125;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line">push_down(p);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) ans=query(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) ans=query(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans=query(p&lt;&lt;<span class="number">1</span>,l,mid)+query(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line">push_up(p);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur!=f[x])&#123;</span><br><span class="line">f[cur]=x;</span><br><span class="line">deep[cur]=deep[x]+<span class="number">1</span>;</span><br><span class="line">dfs_1(cur);</span><br><span class="line">siz[x]+=siz[cur];</span><br><span class="line"><span class="keyword">if</span>(siz[son[x]]&lt;siz[cur]) son[x]=cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">id[x]=++tot;w[tot]=d[x];top[x]=p;</span><br><span class="line"><span class="keyword">if</span>(son[x]) dfs_2(son[x],p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur!=f[x]&amp;&amp;cur!=son[x])&#123;</span><br><span class="line">dfs_2(cur,cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[a]!=top[b])&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[top[a]]&gt;deep[top[b]]) swap(a,b);</span><br><span class="line">add(<span class="number">1</span>,id[top[b]],id[b],k);</span><br><span class="line">b=f[top[b]];</span><br><span class="line">&#125;<span class="keyword">if</span>(deep[a]&gt;deep[b]) swap(a,b);</span><br><span class="line">add(<span class="number">1</span>,id[a],id[b],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">find</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[a]!=top[b])&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[top[a]]&gt;deep[top[b]]) swap(a,b);</span><br><span class="line">ans+=query(<span class="number">1</span>,id[top[b]],id[b]); ans%=MOD;</span><br><span class="line">b=f[top[b]];</span><br><span class="line">&#125;<span class="keyword">if</span>(deep[a]&gt;deep[b]) swap(a,b);</span><br><span class="line">ans+=query(<span class="number">1</span>,id[a],id[b]);</span><br><span class="line"><span class="keyword">return</span> ans%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,root;</span><br><span class="line">n=get_num();m=get_num();root=get_num();MOD=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">a=get_num();b=get_num();v[a].push_back(b);</span><br><span class="line">v[b].push_back(a);</span><br><span class="line">&#125;</span><br><span class="line">dfs_1(root);</span><br><span class="line">dfs_2(root,root);</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> c,x,y;LL z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">c=get_num();x=get_num();</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">y=get_num();</span><br><span class="line">z=get_num();</span><br><span class="line">modify(x,y,z%MOD);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">y=get_num();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;find(x,y)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="number">3</span>)&#123;</span><br><span class="line">z=get_num();</span><br><span class="line">add(<span class="number">1</span>,id[x],id[x]+siz[x]<span class="number">-1</span>,z%MOD);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="number">4</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query(<span class="number">1</span>,id[x],id[x]+siz[x]<span class="number">-1</span>)%MOD&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化 <code>for(int i=1;i&lt;=n;i++) f[i]=i;</code></p><h2 id="树状数组-1"><a class="markdownIt-Anchor" href="#树状数组-1"></a> 树状数组 1</h2><p>在全局有个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，主函数有个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，读入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的时候，全局相当于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>是0。</p><h2 id="树状数组-2"><a class="markdownIt-Anchor" href="#树状数组-2"></a> 树状数组 2</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,LL p)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=lowbit(i)) tr[i]+=p;</span><br><span class="line"><span class="comment">//for和tr的i不要写错啊</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i)) ans+=tr[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>modify(x,k);modify(y+1,-k);</code> 写的 <code>modify(x,k);modify(y+1,k);</code></p></li><li><p><code>for(int i=x;i&lt;=n;i+=lowbit(i)) tr[i]+=p;</code> 写的 <code>for(int i=x;i&lt;=n;i+=lowbit(i)) tr[x]+=p;</code></p></li></ul><h2 id="stl堆priority_queue"><a class="markdownIt-Anchor" href="#stl堆priority_queue"></a> STL堆，priority_queue</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;Q;</span><br><span class="line"><span class="keyword">int</span> n;n=get_num();</span><br><span class="line"><span class="keyword">int</span> c,x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">c=get_num();</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">x=get_num();</span><br><span class="line">Q.push(x);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Q.top()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">Q.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前向星"><a class="markdownIt-Anchor" href="#前向星"></a> 前向星</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">v[++p].to=y;</span><br><span class="line">v[p].nxt=fa[x];</span><br><span class="line">v[p].w=w;</span><br><span class="line">fa[x]=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好久没用了，记一下吧</p><h1 id="图论"><a class="markdownIt-Anchor" href="#图论"></a> 图论</h1><h2 id="最近公共祖先"><a class="markdownIt-Anchor" href="#最近公共祖先"></a> 最近公共祖先</h2><h3 id="最近公共祖先lca"><a class="markdownIt-Anchor" href="#最近公共祖先lca"></a> 最近公共祖先（LCA)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])</span><br><span class="line">&#123;</span><br><span class="line">deep[cur]=deep[x]+<span class="number">1</span>;</span><br><span class="line">lca[cur][<span class="number">0</span>]=x;</span><br><span class="line">dfs(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[a]&gt;deep[b]) swap(a,b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(deep[lca[b][i]]&gt;=deep[a]) b=lca[b][i];</span><br><span class="line"><span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">// 是大于等于0不是(int i=19;i;i--)</span></span><br><span class="line"><span class="keyword">if</span>(lca[a][i]!=lca[b][i])&#123;</span><br><span class="line">a=lca[a][i];b=lca[b][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lca[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">deep[s]=<span class="number">1</span>;</span><br><span class="line">dfs(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">19</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">lca[i][j]=lca[lca[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>vector</code> TLE 了俩点 还是好好用<code>struct</code> 吧</p><h3 id="最近公共祖先tarjan"><a class="markdownIt-Anchor" href="#最近公共祖先tarjan"></a> 最近公共祖先（Tarjan）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">f[x]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])&#123;</span><br><span class="line">tarjan(cur);</span><br><span class="line">f[find(cur)]=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=faa[x];b;b=qv[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[qv[b].to])&#123;</span><br><span class="line">qv[b^<span class="number">1</span>].ans=qv[b].ans=find(qv[b].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">v[++p].to=y;</span><br><span class="line">v[p].nxt=fa[x];</span><br><span class="line">fa[x]=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>v[++p].to=y</code>;<code>y</code>写成了<code>x</code></p><h3 id="最近公共祖先树剖"><a class="markdownIt-Anchor" href="#最近公共祖先树剖"></a> 最近公共祖先（树剖）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur!=f[x])&#123;</span><br><span class="line">f[cur]=x;</span><br><span class="line">deep[cur]=deep[x]+<span class="number">1</span>;</span><br><span class="line">dfs_1(cur);</span><br><span class="line">siz[x]+=siz[cur];<span class="comment">//忘写了一开始</span></span><br><span class="line"><span class="keyword">if</span>(siz[son[x]]&lt;siz[cur]) son[x]=cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">top[x]=p;</span><br><span class="line"><span class="keyword">if</span>(son[x]) dfs_2(son[x],p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur!=f[x]&amp;&amp;cur!=son[x])&#123;</span><br><span class="line">dfs_2(cur,cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[a]!=top[b])&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[top[a]]&gt;deep[top[b]]) swap(a,b);</span><br><span class="line">b=f[top[b]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (deep[a]&lt;=deep[b])? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dfs_1</code>的时候<br /><code>dfs_1(cur)</code>后<br />忘记写：<code>siz[x]+=siz[cur];</code><br />就相当于没有长长的链链了<br />就跳的很慢很慢了 然后就T了<br />其实常数是比LCA小的 OK的说</p><h2 id="单源最短路径"><a class="markdownIt-Anchor" href="#单源最短路径"></a> 单源最短路径</h2><h3 id="spfa"><a class="markdownIt-Anchor" href="#spfa"></a> SPFA</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,s;n=get_num();m=get_num();s=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">a=get_num();b=get_num();c=get_num();</span><br><span class="line">add(a,b,c);<span class="comment">//注意单项边还是双向边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=<span class="number">2147483647</span>;</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">vis[s]=<span class="number">1</span>;<span class="comment">//忘写了一开始</span></span><br><span class="line">Q.push(s);</span><br><span class="line"><span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> h=Q.front();</span><br><span class="line">vis[h]=<span class="number">0</span>;</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[h];b;b=v[b].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[cur]&gt;d[h]+v[b].w)</span><br><span class="line">&#123;</span><br><span class="line">d[cur]=d[h]+v[b].w;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])</span><br><span class="line">&#123;</span><br><span class="line">vis[cur]=<span class="number">1</span>;</span><br><span class="line">Q.push(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>queue</code> 里  <code>vis[h]</code>进来的时候 没有写<code>vis[h]=0</code>;</p><h3 id="floyd"><a class="markdownIt-Anchor" href="#floyd"></a> Floyd</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;n=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">v[i][j]=get_num();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) v[i][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">v[i][j]=min(v[i][j],v[i][k]+v[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;a=get_num();b=get_num();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v[a][b]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> Dijkstra</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = get_num();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = get_num();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = get_num();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1e9</span>, k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i] &amp;&amp; d[i] &lt; sum) &#123;</span><br><span class="line">                sum = d[i];</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += d[k];</span><br><span class="line">        vis[k] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            d[i] = min(d[i], d[k] + v[k][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化dijkstra"><a class="markdownIt-Anchor" href="#堆优化dijkstra"></a> 堆优化Dijkstra</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> d,k;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(re a, re b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.d&gt;b.d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="built_in">priority_queue</span>&lt;re,<span class="built_in">vector</span>&lt;re&gt;,cmp &gt;Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">re s;</span><br><span class="line">n=get_num();m=get_num();s.k=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;a=get_num();b=get_num();c=get_num();</span><br><span class="line">add(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=<span class="number">2147483647</span>;</span><br><span class="line">d[s.k]=<span class="number">0</span>;re B;s.d=<span class="number">0</span>;</span><br><span class="line">Q.push(s);</span><br><span class="line"><span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">re h=Q.top();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[h.k]) <span class="keyword">continue</span>;</span><br><span class="line">vis[h.k]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[h.k];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[cur]&gt;d[h.k]+v[b].w)&#123;</span><br><span class="line">d[cur]=d[h.k]+v[b].w;</span><br><span class="line">B.d=d[cur];B.k=v[b].to;</span><br><span class="line">Q.push(B);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cout</span>&lt;&lt;d[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负环"><a class="markdownIt-Anchor" href="#负环"></a> 负环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ans) <span class="keyword">return</span> ;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[cur]&gt;d[x]+v[b].w)&#123;</span><br><span class="line">d[cur]=d[x]+v[b].w;</span><br><span class="line"><span class="keyword">if</span>(vis[cur])</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(t)</span><br><span class="line">&#123;</span><br><span class="line">t--;<span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));p=<span class="number">0</span>;</span><br><span class="line">n=get_num();m=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,w;</span><br><span class="line">a=get_num();b=get_num();w=get_num();</span><br><span class="line">add(a,b,w);</span><br><span class="line"><span class="keyword">if</span>(w&gt;=<span class="number">0</span>) add(b,a,w); </span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dfs(i);</span><br><span class="line"><span class="keyword">if</span>(ans) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YE5\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;N0\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h2><h3 id="kruskal"><a class="markdownIt-Anchor" href="#kruskal"></a> Kruskal</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> par[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &lt; a.w; &#125;</span><br><span class="line">&#125; v[MAXN * MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> par[x] == x ? x : par[x] = find(par[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[cnt].x = <span class="number">0</span>;</span><br><span class="line">        v[cnt].y = i;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[cnt].w;</span><br><span class="line">        ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = get_num();</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">            v[cnt].x = i;</span><br><span class="line">            v[cnt].y = j;</span><br><span class="line">            v[cnt].w = w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v + <span class="number">1</span>, v + cnt);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) par[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (find(v[i].x) != find(v[i].y)) &#123;</span><br><span class="line">            ans += v[i].w;</span><br><span class="line">            par[find(v[i].x)] = find(v[i].y);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="prim"><a class="markdownIt-Anchor" href="#prim"></a> Prim</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> v[MAXN][MAXN], vis[MAXN], d[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = get_num();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = get_num();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = get_num();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1e9</span>, k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i] &amp;&amp; d[i] &lt; sum) &#123;</span><br><span class="line">                sum = d[i];</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += d[k];</span><br><span class="line">        vis[k] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            d[i] = min(d[i], v[k][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="堆优化的prim"><a class="markdownIt-Anchor" href="#堆优化的prim"></a> 堆优化的Prim</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> v[MAXN][MAXN], vis[MAXN], d[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re &amp;a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &gt; a.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;re&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = get_num();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = get_num();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = get_num();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    Q.push(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        re h = Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[h.d]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[h.d] = <span class="number">1</span>;</span><br><span class="line">        ans += h.w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[i] &gt; v[h.d][i]) &#123;</span><br><span class="line">                d[i] = v[h.d][i];</span><br><span class="line">                Q.push(&#123;i, d[i]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二分图匹配-再打一遍"><a class="markdownIt-Anchor" href="#二分图匹配-再打一遍"></a> 二分图匹配 再打一遍</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])</span><br><span class="line">&#123;</span><br><span class="line">vis[cur]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!match[cur]||dfs(match[cur]))</span><br><span class="line">&#123;</span><br><span class="line">match[cur]=x;</span><br><span class="line">match[x]=cur;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!match[i])&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">if</span>(dfs(i)) ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,e;n=get_num();m=get_num();e=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=e;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;a=get_num();b=get_num();</span><br><span class="line"><span class="keyword">if</span>(b&lt;=m) v[a].push_back(b+n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强连通分量"><a class="markdownIt-Anchor" href="#强连通分量"></a> 强连通分量</h2><h3 id="缩点-再打一遍"><a class="markdownIt-Anchor" href="#缩点-再打一遍"></a> 缩点 再打一遍</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">my_s.push(x);in_s[x]=<span class="number">1</span>;<span class="comment">//注意不要忘了</span></span><br><span class="line">dfn[x]=low[x]=++tot;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[cur])&#123;</span><br><span class="line">tarjan(cur);</span><br><span class="line">low[x]=min(low[x],low[cur]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(in_s[cur]) low[x]=min(low[x],dfn[cur]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])</span><br><span class="line">&#123;</span><br><span class="line">++bcnt;</span><br><span class="line"><span class="keyword">while</span>(my_s.top()!=x)&#123;</span><br><span class="line">fd[my_s.top()]=bcnt;d[bcnt]+=w[my_s.top()];in_s[my_s.top()]=<span class="number">0</span>;my_s.pop();</span><br><span class="line">&#125;</span><br><span class="line">d[bcnt]+=w[my_s.top()];fd[my_s.top()]=bcnt;in_s[my_s.top()]=<span class="number">0</span>;my_s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[i];b;b=v[b].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fd[i]!=fd[cur])</span><br><span class="line">&#123;</span><br><span class="line">qv[fd[i]].push_back(fd[cur]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[x]) <span class="keyword">return</span> dp[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qv[x].size();i++)&#123;</span><br><span class="line">dp[x]=max(dp[x],dfs(qv[x][i]));</span><br><span class="line">&#125;</span><br><span class="line">dp[x]+=d[x];</span><br><span class="line"><span class="keyword">return</span> dp[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="割顶割点"><a class="markdownIt-Anchor" href="#割顶割点"></a> 割顶（割点）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++tot;</span><br><span class="line"><span class="keyword">int</span> rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[cur])&#123;</span><br><span class="line">rt++;</span><br><span class="line">f[cur]=f[x];</span><br><span class="line">tarjan(cur);</span><br><span class="line">low[x]=min(low[x],low[cur]);</span><br><span class="line"><span class="keyword">if</span>(low[cur]&gt;=dfn[x]&amp;&amp;f[x]!=x&amp;&amp;!vis[x]) vis[x]=<span class="number">1</span>,ans++; <span class="comment">//重要</span></span><br><span class="line">&#125;<span class="keyword">else</span>  low[x]=min(low[x],dfn[cur]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x&amp;&amp;rt&gt;=<span class="number">2</span>) ans++,vis[x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="kosaraju"><a class="markdownIt-Anchor" href="#kosaraju"></a> Kosaraju</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, c[N], dfn[N], vis[N], dcnt, scnt;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G1[N], G2[N];  <span class="comment">// G1 原图，G2 反向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G1[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[y]) dfs1(y);</span><br><span class="line">    &#125;</span><br><span class="line">    dfn[++dcnt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    c[x] = scnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G2[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c[y]) dfs2(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kosaraju</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dcnt = scnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) dfs1(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c[dfn[i]]) ++scnt, dfs2(dfs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前序序列</li><li>后序序列</li><li>逆逆序序列（后序序列的逆序，原图缩点后的的拓扑顺序）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/Anadem/blogImg/raw/master/img/image-20200627231608990.png" alt="" /></p><h2 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topoSort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in_deg[i] == <span class="number">0</span>) Q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        ans.push_back(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : v[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--in_deg[i] == <span class="number">0</span>) Q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.size() == n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : ans) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树上差分"><a class="markdownIt-Anchor" href="#树上差分"></a> 树上差分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">fast_pow</span><span class="params">(LL a,LL p,LL k)</span></span>&#123;</span><br><span class="line">LL ans=(a==<span class="number">0</span>)?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">a%=k;</span><br><span class="line"><span class="keyword">for</span>(;p;p&gt;&gt;=<span class="number">1</span>,a=(a*a)%k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p&amp;<span class="number">1</span>) ans=(ans*a)%k;</span><br><span class="line">&#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL n,l,r;<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">v[i].m=get_num();v[i].a=get_num();</span><br><span class="line">&#125;</span><br><span class="line">LL M=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) M*=v[i].m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">v[i].M=M/v[i].m;</span><br><span class="line">v[i].k=fast_pow(v[i].M,v[i].m<span class="number">-2</span>,v[i].m);</span><br><span class="line">&#125;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans+v[i].a*v[i].M*v[i].k)%M;</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans;</span></span><br><span class="line">LL anss=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(r&gt;=ans) anss=(r-ans)/M+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l<span class="number">-1</span>&gt;=ans) anss-=(l-ans<span class="number">-1</span>)/M+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(anss==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;anss&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(l<span class="number">-1</span>&gt;=ans)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;((l<span class="number">-1</span>-ans)/M+<span class="number">1</span>)*M+ans;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大流量"><a class="markdownIt-Anchor" href="#最大流量"></a> 最大流量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> fd,to,nxt,ans;</span><br><span class="line">&#125;qv[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxn];</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">1</span>,fa[maxn],vis[maxn],d[maxn],f[maxn],fath[maxn];<span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">qv[++p].to=y;</span><br><span class="line">qv[p].nxt=fa[x];</span><br><span class="line">qv[p].fd=x;</span><br><span class="line">fa[x]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=getchar())==<span class="string">&#x27; &#x27;</span>||c==<span class="string">&#x27;\n&#x27;</span>||c==<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> num=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c=getchar())) num=num*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> num*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">f[x]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])&#123;</span><br><span class="line">fath[cur]=x;</span><br><span class="line">tarjan(cur);</span><br><span class="line">f[find(cur)]=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=qv[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[qv[b].to])&#123;</span><br><span class="line">qv[b].ans=qv[b^<span class="number">1</span>].ans=find(qv[b].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])&#123;</span><br><span class="line">dfs(cur);</span><br><span class="line">d[x]+=d[cur]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=p;i+=<span class="number">2</span>)&#123;</span><br><span class="line">++d[qv[i].fd];++d[qv[i].to];--d[qv[i].ans];</span><br><span class="line">--d[fath[qv[i].ans]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans=max(ans,d[i]);</span><br><span class="line">&#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=get_num();k=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;a=get_num();b=get_num();</span><br><span class="line">v[a].push_back(b);v[b].push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;a=get_num();b=get_num();</span><br><span class="line">add(a,b);add(b,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) tarjan(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h1><h2 id="二分法"><a class="markdownIt-Anchor" href="#二分法"></a> 二分法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n, ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt;= x) &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt;= x) &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三分法"><a class="markdownIt-Anchor" href="#三分法"></a> 三分法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> v[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">double</span> eps=<span class="number">1e-7</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">find</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123; <span class="comment">//find类型不要写错</span></span><br><span class="line"><span class="keyword">double</span> ans=v[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">double</span> p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)&#123;</span><br><span class="line">p*=x;</span><br><span class="line">ans+=v[i]*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> l,r,mid,midd;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) <span class="built_in">cin</span>&gt;&gt;v[i];</span><br><span class="line"><span class="keyword">while</span>(l+eps&lt;=r)&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">midd=(l+mid)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(find(midd)&lt;find(mid)) l=midd;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.5lf&quot;</span>,l);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>double</code> 类型用的<code>get_num()</code>读进去了<br />其实应该用<code>cin&gt;&gt;</code><br />能过样例也是奇迹</p><h2 id="lcs最长公共子序列onlogn做法"><a class="markdownIt-Anchor" href="#lcs最长公共子序列onlogn做法"></a> LCS（最长公共子序列）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>做法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;n=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[get_num()]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> c=f[get_num()];</span><br><span class="line"><span class="keyword">if</span>(c&gt;dp[len]) dp[++len]=c;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=len,mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(dp[mid]&gt;c) r=mid<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;dp[l]=c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;len;</span><br></pre></td></tr></table></figure><h2 id="二进制拆分"><a class="markdownIt-Anchor" href="#二进制拆分"></a> 二进制拆分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solv</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> w, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k &gt;&gt; w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            v[cnt] = j * w;</span><br><span class="line">            k -= j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            v[cnt] = k * w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数论"><a class="markdownIt-Anchor" href="#数论"></a> 数论</h1><h2 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">fast_pow</span><span class="params">(LL a,LL p,LL k)</span></span>&#123;</span><br><span class="line">LL ans=(a==<span class="number">0</span>)?<span class="number">0</span>:<span class="number">1</span>;<span class="comment">//注意是a不是p</span></span><br><span class="line">a%=k;</span><br><span class="line"><span class="keyword">for</span>(;p;p&gt;&gt;=<span class="number">1</span>,a=(a*a)%k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p&amp;<span class="number">1</span>) ans=(ans*a)%k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gcd"><a class="markdownIt-Anchor" href="#gcd"></a> gcd</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exgcd-同余方程"><a class="markdownIt-Anchor" href="#exgcd-同余方程"></a> exgcd 同余方程</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">exgcd(b,a%b,x,y);</span><br><span class="line">LL x2=x,y2=y;</span><br><span class="line">x=y2;y=x2-(a/b)*y2;<span class="comment">//手推即可</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性筛素数"><a class="markdownIt-Anchor" href="#线性筛素数"></a> 线性筛素数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m;n=get_num();m=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) pri[++cnt]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;pri[j]*i&lt;=n;j++)&#123;</span><br><span class="line">vis[i*pri[j]]=<span class="number">1</span>;<span class="comment">//注意谁%谁 后者%不动</span></span><br><span class="line"><span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//注意1首先啥都不是 其次他不是素数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[get_num()]) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有考虑<code>vis[1]=1</code>的情况 详情看日记</p><h2 id="矩阵快速幂"><a class="markdownIt-Anchor" href="#矩阵快速幂"></a> 矩阵快速幂</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>;</span><br><span class="line">LL p = <span class="number">10007</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    LL x[N][N];</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;t) <span class="keyword">const</span> &#123;</span><br><span class="line">        Matrix ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                ret.x[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123;</span><br><span class="line">                    ret.x[i][j] += (x[i][k] * t.x[k][j]) % p;</span><br><span class="line">                    ret.x[i][j] %= p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为了防止奇怪的错误，最好写上构造函数</span></span><br><span class="line">    Matrix() &#123; <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="keyword">sizeof</span>(x)); &#125;</span><br><span class="line">    Matrix(<span class="keyword">const</span> Matrix &amp;t) &#123; <span class="built_in">memcpy</span>(x, t.x, <span class="keyword">sizeof</span>(x)); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Matrix <span class="title">quick_pow</span><span class="params">(Matrix a, LL x)</span> </span>&#123;</span><br><span class="line">    Matrix ret;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        ret.x[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>) ret = ret * a;</span><br><span class="line">        a = a * a;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        LL n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        Matrix a;</span><br><span class="line">        a.x[<span class="number">0</span>][<span class="number">0</span>] = a.x[<span class="number">1</span>][<span class="number">1</span>] = a.x[<span class="number">2</span>][<span class="number">0</span>] = a.x[<span class="number">2</span>][<span class="number">1</span>] = a.x[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        a.x[<span class="number">0</span>][<span class="number">2</span>] = a.x[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        Matrix P = quick_pow(a, n);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; P.x[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fast_pow</code>里面<code>p&gt;&gt;=1</code> 写的<code>p&gt;&gt;1</code> <code>get_num()</code>没改<code>LL</code></p><h2 id="乘法逆元"><a class="markdownIt-Anchor" href="#乘法逆元"></a> 乘法逆元</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LL n,p;<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p;</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>%p;<span class="built_in">cout</span>&lt;&lt;inv[<span class="number">1</span>]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">inv[i]=(p-p/i)*inv[p%i]%p;<span class="comment">//由p%i+(p/i)*i=p开始</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;inv[i]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h1><h2 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> KMP</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = p.size();</span><br><span class="line">    nxt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j]) j = nxt[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (p[i] == p[j]) j++;</span><br><span class="line">        nxt[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">const</span> <span class="built_in">string</span> &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    getNext(p);</span><br><span class="line">    <span class="keyword">int</span> len1 = s.size(), len2 = p.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len1; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j]) j = nxt[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j == len2) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            j = nxt[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="trie"><a class="markdownIt-Anchor" href="#trie"></a> Trie</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>, charset = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> tot, root, child[N][charset], flag[N];</span><br><span class="line">    Trie() &#123; clear(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(child, <span class="number">-1</span>, <span class="keyword">sizeof</span>(child));</span><br><span class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</span><br><span class="line">        root = tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (child[now][x] == <span class="number">-1</span>) &#123;</span><br><span class="line">                child[now][x] = ++tot;</span><br><span class="line">                flag[now] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            now = child[now][x];</span><br><span class="line">        &#125;</span><br><span class="line">        flag[now] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询字典树中是否存在某个完整的字符串是s的前缀</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (child[now][x] == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag[now]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            now = child[now][x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="stl"><a class="markdownIt-Anchor" href="#stl"></a> STL</h1><h2 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/Anadem/blogImg/raw/master/img/image-20200626165329321.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 程序设计思维实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
